{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\";\nimport { Agent } from \"./Agent\";\nimport { ConwayAgent } from \"./ConwayAgent\";\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\";\nimport AgentControl from \"./AgentControl\";\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n\n};\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\nconst transmissionDelayMax = 0; // ms max\n\nfunction App(args) {\n  let agents;\n  let world;\n  let el;\n  useEffect(() => {\n    worldSetup();\n    agentSetup();\n    sceneSetup();\n    addCustomSceneObjects();\n    startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }, []); // Only run the effect once\n  // Setup the world environment.\n\n  function worldSetup() {\n    world = new World();\n  }\n\n  function agentSetup() {\n    let id = 0;\n    let params = {\n      cycleTime: 250\n    };\n    /*\n        const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n        const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n        const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n        this.agents = [agent0,agent1];\n      */\n\n    /*\n        const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n        const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n        const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n        const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n        const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n        const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n        const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n        const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n        const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n        const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n        const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n        const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n         this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n     */\n\n    let random = true;\n    let chance = 0.4;\n    let quadpole = [[1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1]];\n    let pattern = quadpole;\n    let size = pattern.length;\n    size = 20;\n    agents = [];\n\n    for (let x = 0; x < size; x++) {\n      for (let y = 0; y < size; y++) {\n        let alive = true;\n\n        if (random) {\n          alive = Math.random() < chance;\n        } else {\n          alive = pattern[x][y] === 1;\n        }\n\n        const agent = new ConwayAgent(THREE, this, id++, world, 0.1, x - size / 2, -y + size / 2, 0, Math.PI / 2, 0, 0, params, alive);\n        agents.push(agent);\n      }\n    }\n  }\n\n  function sceneSetup() {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n    width / height, // aspect ratio\n    0.1, // near plane\n    1000.0 // far plane\n    );\n    this.camera.position.z = 15; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    ref: ref => this.el = ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), \";\", /*#__PURE__*/React.createElement(SimControl, {\n    resetAction: this.handleSimReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AgentControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }));\n}\n\nclass AppOld extends Component {\n  constructor(...args) {\n    super(...args);\n    this.debugNetwork = false;\n    this.debugNeighbors = false;\n    this.messages = [];\n    this.simPaused = false;\n\n    this.worldSetup = () => {\n      this.world = new World();\n    };\n\n    this.agentSetup = () => {\n      let id = 0;\n      let params = {\n        cycleTime: 250\n      };\n      /*\n          const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n          const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n          const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n          this.agents = [agent0,agent1];\n      \n       */\n\n      /*\n          const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n          const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n          const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n          const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n          const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n          const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n          const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n          const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n          const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n          const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n          const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n          const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n      \n          this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n       */\n\n      let random = true;\n      let chance = 0.4;\n      let quadpole = [[1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1]];\n      let pattern = quadpole;\n      let size = pattern.length;\n      size = 20;\n      this.agents = [];\n\n      for (let x = 0; x < size; x++) {\n        for (let y = 0; y < size; y++) {\n          let alive = true;\n\n          if (random) {\n            alive = Math.random() < chance;\n          } else {\n            alive = pattern[x][y] === 1;\n          }\n\n          const agent = new ConwayAgent(THREE, this, id++, this.world, 0.1, x - size / 2, -y + size / 2, 0, Math.PI / 2, 0, 0, params, alive);\n          this.agents.push(agent);\n        }\n      }\n    };\n\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n      );\n      this.camera.position.z = 15; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      for (let n = 0; n < this.agents.length; n++) {\n        this.scene.add(this.agents[n].getMesh());\n      }\n\n      this.calcAgentNeighbors(8);\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 200, 0);\n      lights[1].position.set(100, 200, 100);\n      lights[2].position.set(-100, -200, -100); //this.scene.add(lights[0]);\n      //this.scene.add(lights[1]);\n      //this.scene.add(lights[2]);\n    };\n\n    this.startAnimationLoop = () => {\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n      if (this.simPaused) return; // Handle delivery of messages\n\n      let time = new Date().getTime();\n      let remove = [];\n\n      for (let i = 0; i < this.messages.length; i++) {\n        if (this.messages[i].time < time) {\n          if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n\n          if (typeof this.messages[i].to === 'undefined') {\n            console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]));\n          } else {\n            this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n          }\n\n          remove.push(i);\n        }\n      }\n\n      for (let i = 0; i < remove.length; i++) {\n        this.messages.splice(remove[i] - i, 1);\n      } // Handle clocking of agents\n      // TODO: Likely we should randomally walk for better simulation of real world parallelism\n\n\n      for (let i = 0; i < this.agents.length; i++) {\n        this.agents[i].loop();\n      }\n\n      delta += clock.getDelta();\n\n      if (delta < interval) {\n        return;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n      delta = delta % interval;\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup();\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  } // Setup the world environment.\n\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for (let agentIdx = 0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({\n            dist: dist,\n            agentIdx: i\n          });\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      }); //console.log(distances);\n\n      let neighbors = [];\n      let len = Math.min(max, distances.length);\n\n      for (let i = 0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n  }\n\n  sendMessage(from, to, msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({\n      from: from,\n      to: to,\n      msg: msg,\n      time: new Date().getTime() + Math.random() * transmissionDelayMax\n    });\n  }\n\n  handleSimReset() {\n    console.log(JSON.stringify(this));\n    this.simPaused = true;\n    this.messages = [];\n\n    while (this.scene.children.length > 0) {\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup();\n    this.addCustomSceneObjects();\n    this.simPaused = false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: ref => this.el = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 7\n      }\n    }), \";\", /*#__PURE__*/React.createElement(SimControl, {\n      resetAction: this.handleSimReset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(AgentControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default memo(App);","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","memo","useEffect","useState","THREE","OrbitControls","World","Agent","ConwayAgent","Queue","SimControl","AgentControl","style","height","delta","clock","Clock","interval","transmissionDelayMax","App","args","agents","world","el","worldSetup","agentSetup","sceneSetup","addCustomSceneObjects","startAnimationLoop","window","addEventListener","handleWindowResize","id","params","cycleTime","random","chance","quadpole","pattern","size","length","x","y","alive","Math","agent","PI","push","width","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","ref","handleSimReset","AppOld","debugNetwork","debugNeighbors","messages","simPaused","n","add","getMesh","calcAgentNeighbors","lights","PointLight","set","requestID","requestAnimationFrame","time","Date","getTime","remove","i","console","log","JSON","stringify","to","receiveMessage","splice","loop","getDelta","render","aspect","updateProjectionMatrix","componentDidMount","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","max","agentIdx","distances","pos","getPosition","dist","distanceToSquared","sort","a","b","neighbors","len","min","setNeighbors","sendMessage","from","msg","children"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\"\nimport { Agent } from \"./Agent\"\nimport { ConwayAgent } from \"./ConwayAgent\"\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\"\nimport AgentControl from \"./AgentControl\"\n\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n};\n\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\n\nconst transmissionDelayMax = 0;  // ms max\nfunction App(args) {\n  let agents;\n  let world;\n  let el;\n\n  useEffect(() => {\n    worldSetup();\n    agentSetup();\n    sceneSetup();\n    addCustomSceneObjects();\n    startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n\n  }, []); // Only run the effect once\n\n  // Setup the world environment.\n  function worldSetup () {\n    world = new World();\n  }\n\n  function agentSetup() {\n    let id = 0;\n    let params = {\n      cycleTime: 250\n    };\n\n    /*\n        const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n        const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n        const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n        this.agents = [agent0,agent1];\n\n     */\n    /*\n        const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n        const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n        const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n        const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n        const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n        const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n        const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n        const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n        const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n        const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n        const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n        const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n\n        this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n     */\n\n    let random = true;\n    let chance = 0.4;\n\n    let quadpole = [\n      [1,1,0,0,0,0,0],\n      [1,0,0,0,0,0,0],\n      [0,1,0,1,0,0,0],\n      [0,0,0,0,0,0,0],\n      [0,0,1,1,1,1,0],\n      [0,0,0,0,0,0,1],\n      [0,0,0,0,0,1,1]\n    ];\n\n    let pattern = quadpole;\n\n    let size = pattern.length;\n    size = 20;\n\n    agents = [];\n    for(let x=0; x < size; x++) {\n      for(let y=0; y < size; y++) {\n        let alive = true;\n\n        if (random) {\n          alive = Math.random() < chance;\n        } else {\n          alive = pattern[x][y] === 1;\n        }\n\n        const agent = new ConwayAgent(THREE,this,id++,world,0.1,x-size/2,-y+size/2,0,Math.PI/2,0,0,params,alive);\n        agents.push(agent);\n      }\n    }\n  }\n\n  function sceneSetup() {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n    );\n    this.camera.position.z = 15; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n  };\n\n  return (\n    <div>\n      <div style={style} ref={ref => (this.el = ref)} />;\n      <SimControl resetAction={this.handleSimReset}/>\n    <AgentControl />\n  </div>\n  );\n}\nclass AppOld extends Component {\n\n  debugNetwork = false;\n  debugNeighbors = false;\n  messages = [];\n  simPaused = false;\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup();\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Setup the world environment.\n  worldSetup = () => {\n    this.world = new World();\n  };\n\n  // Setup the agents\n  agentSetup = () => {\n    let id = 0;\n    let params = {\n      cycleTime: 250\n    };\n\n/*\n    const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n    const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n    const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n    this.agents = [agent0,agent1];\n\n */\n/*\n    const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n    const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n    const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n    const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n    const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n    const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n    const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n    const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n    const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n    const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n    const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n    const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n\n    this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n */\n\n    let random = true;\n    let chance = 0.4;\n\n    let quadpole = [\n      [1,1,0,0,0,0,0],\n      [1,0,0,0,0,0,0],\n      [0,1,0,1,0,0,0],\n      [0,0,0,0,0,0,0],\n      [0,0,1,1,1,1,0],\n      [0,0,0,0,0,0,1],\n      [0,0,0,0,0,1,1]\n    ];\n\n    let pattern = quadpole;\n\n    let size = pattern.length;\n    size = 20;\n\n    this.agents = [];\n    for(let x=0; x < size; x++) {\n      for(let y=0; y < size; y++) {\n        let alive = true;\n\n        if (random) {\n          alive = Math.random() < chance;\n        } else {\n          alive = pattern[x][y] === 1;\n        }\n\n        const agent = new ConwayAgent(THREE,this,id++,this.world,0.1,x-size/2,-y+size/2,0,Math.PI/2,0,0,params,alive);\n        this.agents.push(agent);\n      }\n    }\n  };\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n    );\n    this.camera.position.z = 15; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n  };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    for(let n=0; n < this.agents.length; n++) {\n      this.scene.add(this.agents[n].getMesh());\n    }\n\n    this.calcAgentNeighbors(8);\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n\n    //this.scene.add(lights[0]);\n    //this.scene.add(lights[1]);\n    //this.scene.add(lights[2]);\n  };\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for(let agentIdx=0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({dist: dist, agentIdx: i});\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      });\n\n      //console.log(distances);\n      let neighbors = [];\n      let len = Math.min(max,distances.length);\n\n      for(let i=0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n  }\n\n  startAnimationLoop = () => {\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    if (this.simPaused) return;\n\n    // Handle delivery of messages\n    let time = new Date().getTime();\n    let remove = [];\n    for(let i=0; i < this.messages.length; i++) {\n      if (this.messages[i].time < time) {\n        if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n        if (typeof this.messages[i].to === 'undefined') {\n          console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]))\n        } else {\n          this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n        }\n        remove.push(i);\n      }\n    }\n\n    for(let i=0; i < remove.length; i++) {\n      this.messages.splice(remove[i]-i,1);\n    }\n\n    // Handle clocking of agents\n    // TODO: Likely we should randomally walk for better simulation of real world parallelism\n    for(let i=0; i < this.agents.length; i++) {\n      this.agents[i].loop();\n    }\n\n    delta += clock.getDelta();\n    if (delta < interval) {\n      return;\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    delta = delta % interval;\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  sendMessage(from,to,msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({from:from,to:to,msg:msg,time: new Date().getTime() + Math.random() * transmissionDelayMax});\n  }\n\n  handleSimReset() {\n    console.log(JSON.stringify(this));\n    this.simPaused = true;\n    this.messages = [];\n\n    while(this.scene.children.length > 0){\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup();\n    this.addCustomSceneObjects();\n\n    this.simPaused = false;\n  }\n\n  render() {\n    return <div>\n      <div style={style} ref={ref => (this.el = ref)} />;\n      <SimControl resetAction={this.handleSimReset}/>\n      <AgentControl />\n    </div>\n  }\n}\n\nexport default memo(App);\n"]},"metadata":{},"sourceType":"module"}