{"ast":null,"code":"import { Agent } from \"./Agent\";\nconst States = {\n  Idle: \"Idle\",\n  Sensing: \"Sensing\"\n};\nconst Messages = {\n  AreYouAlive: \"AreYouAlive\",\n  ImAlive: \"ImAlive\"\n};\n/*\r\nAgent based on Conway's Game of Life\r\n */\n\nexport class ConwayAgent extends Agent {\n  constructor(context, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0, params, alive) {\n    super(context, id, world, size, x, y, z, rotx, roty, rotz);\n    this.params = params;\n    this.setState(alive);\n    this.state.lastExec = new Date().getTime();\n    this.state.state = State.Idle;\n    this.state.batch = 0;\n    this.state.aliveCount = 0;\n  }\n\n  setAlive(alive) {\n    this.state.alive = alive;\n\n    if (alive) {\n      this.material.color.setHex(0x0000FF);\n    } else {\n      this.material.color.setHex(0x222222);\n    }\n  } // Simulation methods\n\n\n  loop() {\n    let time = new Date().getTime();\n\n    if (this.state.state === States.Idle) {\n      if (time < this.state.lastExec + this.params.cycleTime) return;\n      this.state.state = States.Sensing;\n      this.state.startedSensing = new Date().getTime();\n      this.state.batch = this.state.batch + 1;\n      this.state.aliveCount = 0; // Query our neighbors.\n\n      for (let i = 0; i < this.neighbors.length; i++) {\n        let msg = {\n          command: Messages.AreYouAlive,\n          batch: this.state.batch\n        };\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\n      }\n    } else if (this.state.state === States.Sensing) {\n      if (this.state.aliveCount > 3) {\n        // end sensing early as we are dead\n        this.setAlive(false);\n        this.state.state = State.Idle;\n        return;\n      }\n\n      if (time > this.state.startedSensing + this.params.cycleTime) {\n        // We've collected as many answers as we are going to get\n        if (this.state.aliveCount == 2 || this.state.aliveCount == 3) {\n          this.setAlive(true);\n        }\n      }\n    }\n  }\n\n  receiveMessage(msg) {\n    if (this.state.state !== States.Sensing) {\n      // ignore\n      return;\n    }\n\n    switch (msg.command) {\n      case Messages.ImAlive:\n        if (msg.batch !== this.state.batch) {\n          // ignore old batch answer\n          return;\n        }\n\n        this.state.aliveCount++;\n        break;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["Agent","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","ConwayAgent","constructor","context","id","world","size","x","y","z","rotx","roty","rotz","params","alive","setState","state","lastExec","Date","getTime","State","batch","aliveCount","setAlive","material","color","setHex","loop","time","cycleTime","startedSensing","i","neighbors","length","msg","command","radio","sendMessage","receiveMessage"],"mappings":"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","sourcesContent":["import {Agent} from \"./Agent\";\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\"};\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n\r\n  constructor(context,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setState(alive);\r\n    this.state.lastExec = new Date().getTime();\r\n    this.state.state = State.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n    let time = new Date().getTime();\r\n\r\n    if (this.state.state === States.Idle) {\r\n      if (time < this.state.lastExec + this.params.cycleTime) return;\r\n\r\n      this.state.state = States.Sensing;\r\n      this.state.startedSensing = new Date().getTime();\r\n      this.state.batch = this.state.batch + 1;\r\n      this.state.aliveCount = 0;\r\n\r\n      // Query our neighbors.\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    } else if (this.state.state === States.Sensing) {\r\n      if (this.state.aliveCount > 3) {\r\n        // end sensing early as we are dead\r\n        this.setAlive(false);\r\n        this.state.state = State.Idle;\r\n        return;\r\n      }\r\n\r\n      if (time > this.state.startedSensing + this.params.cycleTime) {\r\n        // We've collected as many answers as we are going to get\r\n        if (this.state.aliveCount == 2 || this.state.aliveCount == 3) {\r\n          this.setAlive(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  receiveMessage(msg) {\r\n    if (this.state.state !== States.Sensing) {\r\n      // ignore\r\n      return;\r\n    }\r\n\r\n    switch(msg.command) {\r\n      case Messages.ImAlive:\r\n        if (msg.batch !== this.state.batch) {\r\n          // ignore old batch answer\r\n          return;\r\n        }\r\n\r\n        this.state.aliveCount++;\r\n        break;\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}