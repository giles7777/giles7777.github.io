{"ast":null,"code":"import _slicedToArray from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component,memo,useEffect,useState}from\"react\";import{Agent}from\"./Agent\";import{Button}from\"@rmwc/button\";import{TextField}from\"@rmwc/textfield\";import{Select}from\"@rmwc/select\";import'@material/textfield/dist/mdc.textfield.css';import'@rmwc/select/select.css';import'@material/select/dist/mdc.select.css';import'@material/floating-label/dist/mdc.floating-label.css';import'@material/notched-outline/dist/mdc.notched-outline.css';import'@material/line-ripple/dist/mdc.line-ripple.css';import'@material/list/dist/mdc.list.css';import'@material/menu/dist/mdc.menu.css';import'@material/menu-surface/dist/mdc.menu-surface.css';import'@material/ripple/dist/mdc.ripple.css';var States={Idle:\"Idle\",Sensing:\"Sensing\"};var Messages={AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\",ImDead:\"ImDead\",Resurrect:\"Resurrect\"};/*\r\nAgent based on Conway's Game of Life\r\n */export var ConwayAgent=/*#__PURE__*/function(_Agent){_inherits(ConwayAgent,_Agent);var _super=_createSuper(ConwayAgent);function ConwayAgent(context,radio,id,world,size,x,y,z){var _this;var rotx=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;var roty=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;var rotz=arguments.length>10&&arguments[10]!==undefined?arguments[10]:0;var params=arguments.length>11?arguments[11]:undefined;var alive=arguments.length>12?arguments[12]:undefined;_classCallCheck(this,ConwayAgent);_this=_super.call(this,context,radio,id,world,size,x,y,z,rotx,roty,rotz);_this.debugSim=false;_this.debugNetwork=false;_this.lastStateSend=0;_this.lastCycle=0;_this.neighborState=new Map();_this.params=params;_this.setAlive(alive);_this.state.lastCycle=0;_this.state.state=States.Idle;_this.state.batch=0;_this.state.aliveCount=0;return _this;}_createClass(ConwayAgent,[{key:\"setAlive\",value:function setAlive(alive){this.state.alive=alive;if(alive){this.material.color.setHex(0x0000FF);}else{this.material.color.setHex(0x222222);}}},{key:\"isAlive\",value:function isAlive(){return this.state.alive;}},{key:\"loop\",value:function loop(time){var _this2=this;if(time>this.lastStateSend+this.params.stateSendTime){this.lastStateSend=time;var msg={command:this.state.alive?Messages.ImAlive:Messages.ImDead};if(this.debugSim&&this.id===0){console.log(\"Sending state: \"+this.state.alive+\" to neighbors: \"+this.neighbors.length);//console.log(JSON.stringify(msg));\n}for(var i=0;i<this.neighbors.length;i++){this.radio.sendMessage(this.id,this.neighbors[i],msg);}}if(this.debugSim&&this.id===0)console.log(\"Check cycle.  time: \"+time+\" next: \"+(this.lastCycle+this.params.cycleTime)+\" lastCycle: \"+this.lastCycle+\" cycleTime: \"+this.params.cycleTime);if(time>this.lastCycle+this.params.cycleTime){if(this.debugSim&&this.id===0){console.log(\"Cycle done.  Updating state.  neighbors: \"+this.neighborState.size);}this.lastCycle=time;var aliveCount=0;this.neighborState.forEach(function(k,v){if(_this2.debugSim&&_this2.id===0)console.log(k,v);if(k){aliveCount++;}});/*\r\n      for(let [k,v] of this.neighborState) {\r\n        if (v === true) aliveCount++;\r\n        if (this.debugSim && this.id === 0) {\r\n          //console.log(\"Agent: \" + k + \" alive: \" + v);\r\n        }\r\n      }\r\n       */if(this.debugSim&&this.id===0){console.log(\"Agent: \"+this.id+\" aliveN: \"+aliveCount);}if(this.state.alive===true&&(aliveCount===2||aliveCount===3)){this.setAlive(true);}else if(this.state.alive===false){if(aliveCount===3){this.setAlive(true);}else{if(Math.random()<this.params.spontaneousGeneration){//console.log(\"Spontanous Generate\");\nthis.setAlive(true);if(Math.random()<this.params.resurrectionChance){//console.log(\"Awake my brothers!\");\n// Resurrect your neighbors\nfor(var _i=0;_i<this.neighbors.length;_i++){var _msg={command:Messages.Resurrect};this.radio.sendMessage(this.id,this.neighbors[_i],_msg);}}}}}else{this.setAlive(false);}}}// Receive a network message.  Contains from,to,msg properties\n},{key:\"receiveMessage\",value:function receiveMessage(wrapper){if(this.debugNetwork&&this.id===0){console.log(\"Agent: \"+this.id+\" recv: \"+JSON.stringify(wrapper));}var msg=wrapper.msg;switch(msg.command){case Messages.Resurrect:var r=Math.random();//console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\nif(r<this.params.resurrectionChance){//console.log(\"Jesus!\");\nthis.setAlive(true);}break;case Messages.ImAlive:this.neighborState.set(wrapper.from,true);break;case Messages.ImDead:this.neighborState.set(wrapper.from,false);break;}}/*\r\n    // Simulation methods\r\n    loop(time) {\r\n      if (this.state.state === States.Idle) {\r\n        //if (this.id === 0) console.log(\"time: \" + time + \" next: \" + (this.state.lastCycle + this.params.cycleTime));\r\n        if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n\r\n        if (this.debugSim && this.id == 0) {\r\n          console.log(\"Start Sensing: \" + time);\r\n        }\r\n\r\n        this.state.state = States.Sensing;\r\n        this.state.startedSensing = time;\r\n        this.state.batch = this.state.batch + 1;\r\n        this.state.aliveCount = 0;\r\n\r\n        // Query our neighbors.\r\n        for(let i=0; i < this.neighbors.length; i++) {\r\n          let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n          this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n        }\r\n      } else if (this.state.state === States.Sensing) {\r\n        if (time > this.state.startedSensing + this.params.cycleTime) {\r\n          if (this.debugSim && this.id == 0) {\r\n            console.log(\"End Sensing: \" + time)\r\n          }\r\n          // We've collected as many answers as we are going to get\r\n          if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n            this.setAlive(true);\r\n          } else if (this.state.alive === false) {\r\n\r\n            if (this.state.aliveCount === 3) {\r\n              this.setAlive(true);\r\n            } else {\r\n              if (Math.random() < this.params.spontaneousGeneration) {\r\n                //console.log(\"Spontanous Generate\");\r\n                this.setAlive(true);\r\n                if (Math.random() < this.params.resurrectionChance) {\r\n                  //console.log(\"Awake my brothers!\");\r\n                  // Resurrect your neighbors\r\n                  for(let i=0; i < this.neighbors.length; i++) {\r\n                    let msg = {command:Messages.Resurrect};\r\n                    this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            this.setAlive(false);\r\n          }\r\n\r\n          this.state.state = States.Idle;\r\n          this.state.lastCycle = time;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Receive a network message.  Contains from,to,msg properties\r\n    receiveMessage(wrapper) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n      }\r\n\r\n      let msg = wrapper.msg;\r\n\r\n      if (msg.command === Messages.Resurrect) {\r\n        let r = Math.random();\r\n        //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n        if (r < this.params.resurrectionChance) {\r\n          //console.log(\"Jesus!\");\r\n          this.setAlive(true);\r\n        }\r\n      }\r\n\r\n      if (this.state.state !== States.Sensing) {\r\n        if (this.debugNetwork) {\r\n          console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n        }\r\n        // ignore\r\n        return;\r\n      }\r\n\r\n      switch(msg.command) {\r\n        case Messages.ImAlive:\r\n          if (msg.batch !== this.state.batch) {\r\n            // ignore old batch answer\r\n            return;\r\n          }\r\n\r\n          this.state.aliveCount++;\r\n          break;\r\n        case Messages.AreYouAlive:\r\n          if (this.state.alive === true) {\r\n            this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n          }\r\n          // Do not send a message if dead to preserve bandwidth\r\n          break;\r\n      }\r\n    }\r\n  */},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Game of Life\"));}}]);return ConwayAgent;}(Agent);export function ConwayControl(props){var _useState=useState(props.startPattern),_useState2=_slicedToArray(_useState,2),startPattern=_useState2[0],setStartPattern=_useState2[1];var _useState3=useState(props.size),_useState4=_slicedToArray(_useState3,2),size=_useState4[0],setSize=_useState4[1];var _useState5=useState(props.cycleTime),_useState6=_slicedToArray(_useState5,2),cycleTime=_useState6[0],setCycleTime=_useState6[1];var _useState7=useState(props.spontaneousGeneration),_useState8=_slicedToArray(_useState7,2),spontaneousGeneration=_useState8[0],setSpontaneousGeneration=_useState8[1];var _useState9=useState(props.resurrectionChance),_useState10=_slicedToArray(_useState9,2),resurrectionChance=_useState10[0],setResurrectionChance=_useState10[1];var submit=function submit(evt){if(evt)evt.preventDefault();props.paramsChangedAction({startPattern:startPattern,size:size,cycleTime:cycleTime,spontaneousGeneration:spontaneousGeneration,resurrectionChance:resurrectionChance});return null;};return/*#__PURE__*/React.createElement(\"div\",{style:{width:\"512px\",border:\"1px solid black\",padding:\"8px\"}},/*#__PURE__*/React.createElement(\"h1\",null,\"Game of Life - Agent Control\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:submit},/*#__PURE__*/React.createElement(Select,{style:{width:\"100%\",height:\"56px\",margin:\"auto\",display:\"block\",marginTop:\"24px\"},label:\"Start Pattern\",options:[\"toad\",\"beacon\",\"blinker\",\"random\",\"corners\",\"blank\",\"quadpole\",\"pulsar\",\"test\"],value:startPattern,onChange:function onChange(e){return setStartPattern(e.target.value);}}),/*#__PURE__*/React.createElement(TextField,{style:{width:\"100%\",height:\"56px\",margin:\"auto\",display:\"block\",marginTop:\"24px\"},label:\"Size\",required:true,value:size,onChange:function onChange(e){return setSize(parseInt(e.target.value));}}),/*#__PURE__*/React.createElement(TextField,{style:{width:\"100%\",height:\"56px\",margin:\"auto\",display:\"block\",marginTop:\"24px\"},label:\"CycleTime\",required:true,value:cycleTime,onChange:function onChange(e){return setCycleTime(parseInt(e.target.value));}}),/*#__PURE__*/React.createElement(TextField,{style:{width:\"100%\",height:\"56px\",margin:\"auto\",display:\"block\",marginTop:\"24px\"},label:\"Spontaneous Generation\",required:true,value:spontaneousGeneration,onChange:function onChange(e){return setSpontaneousGeneration(e.target.value);}}),/*#__PURE__*/React.createElement(TextField,{style:{width:\"100%\",height:\"56px\",margin:\"auto\",display:\"block\",marginTop:\"24px\"},label:\"Resurrection Chance\",required:true,value:resurrectionChance,onChange:function onChange(e){return setResurrectionChance(e.target.value);}}),/*#__PURE__*/React.createElement(Button,{style:{width:\"100%\"},type:\"submit\",label:\"Update\"})));}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["React","Component","memo","useEffect","useState","Agent","Button","TextField","Select","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","ImDead","Resurrect","ConwayAgent","context","radio","id","world","size","x","y","z","rotx","roty","rotz","params","alive","debugSim","debugNetwork","lastStateSend","lastCycle","neighborState","Map","setAlive","state","batch","aliveCount","material","color","setHex","time","stateSendTime","msg","command","console","log","neighbors","length","i","sendMessage","cycleTime","forEach","k","v","Math","random","spontaneousGeneration","resurrectionChance","wrapper","JSON","stringify","r","set","from","ConwayControl","props","startPattern","setStartPattern","setSize","setCycleTime","setSpontaneousGeneration","setResurrectionChance","submit","evt","preventDefault","paramsChangedAction","width","border","padding","height","margin","display","marginTop","e","target","value","parseInt"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\r\n\r\nimport {Agent} from \"./Agent\";\r\nimport {Button} from \"@rmwc/button\";\r\nimport {TextField} from \"@rmwc/textfield\"\r\nimport {Select} from \"@rmwc/select\"\r\n\r\nimport '@material/textfield/dist/mdc.textfield.css';\r\nimport '@rmwc/select/select.css';\r\nimport '@material/select/dist/mdc.select.css';\r\nimport '@material/floating-label/dist/mdc.floating-label.css';\r\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\r\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\r\nimport '@material/list/dist/mdc.list.css';\r\nimport '@material/menu/dist/mdc.menu.css';\r\nimport '@material/menu-surface/dist/mdc.menu-surface.css';\r\nimport '@material/ripple/dist/mdc.ripple.css';\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\",ImDead:\"ImDead\",Resurrect:\"Resurrect\"};\r\n\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n  debugSim = false;\r\n  debugNetwork = false;\r\n  lastStateSend = 0;\r\n  lastCycle = 0;\r\n  neighborState = new Map();\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,radio,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setAlive(alive);\r\n    this.state.lastCycle = 0;\r\n    this.state.state = States.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  isAlive() {\r\n    return this.state.alive;\r\n  }\r\n\r\n  loop(time) {\r\n    if (time > this.lastStateSend + this.params.stateSendTime) {\r\n      this.lastStateSend = time;\r\n      let msg = {command:this.state.alive ?Messages.ImAlive:Messages.ImDead};\r\n      if (this.debugSim && this.id === 0) {\r\n        console.log(\"Sending state: \" + this.state.alive + \" to neighbors: \" + this.neighbors.length);\r\n        //console.log(JSON.stringify(msg));\r\n      }\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    }\r\n\r\n    if (this.debugSim && this.id === 0) console.log(\"Check cycle.  time: \" + time + \" next: \" + (this.lastCycle + this.params.cycleTime) + \" lastCycle: \" + this.lastCycle + \" cycleTime: \" + this.params.cycleTime);\r\n    if (time > this.lastCycle + this.params.cycleTime) {\r\n      if (this.debugSim && this.id === 0) {\r\n        console.log(\"Cycle done.  Updating state.  neighbors: \" + this.neighborState.size);\r\n      }\r\n      this.lastCycle = time;\r\n      let aliveCount = 0;\r\n      this.neighborState.forEach( (k,v) => {\r\n        if (this.debugSim && this.id === 0) console.log(k, v);\r\n        if (k) {\r\n          aliveCount++;\r\n        }\r\n      } );\r\n      /*\r\n      for(let [k,v] of this.neighborState) {\r\n        if (v === true) aliveCount++;\r\n        if (this.debugSim && this.id === 0) {\r\n          //console.log(\"Agent: \" + k + \" alive: \" + v);\r\n        }\r\n      }\r\n       */\r\n\r\n      if (this.debugSim && this.id === 0) {\r\n        console.log(\"Agent: \" + this.id + \" aliveN: \" + aliveCount);\r\n      }\r\n      if (this.state.alive === true && (aliveCount === 2 || aliveCount === 3)) {\r\n        this.setAlive(true);\r\n      } else if (this.state.alive === false) {\r\n\r\n        if (aliveCount === 3) {\r\n          this.setAlive(true);\r\n        } else {\r\n          if (Math.random() < this.params.spontaneousGeneration) {\r\n            //console.log(\"Spontanous Generate\");\r\n            this.setAlive(true);\r\n            if (Math.random() < this.params.resurrectionChance) {\r\n              //console.log(\"Awake my brothers!\");\r\n              // Resurrect your neighbors\r\n              for(let i=0; i < this.neighbors.length; i++) {\r\n                let msg = {command:Messages.Resurrect};\r\n                this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        this.setAlive(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Receive a network message.  Contains from,to,msg properties\r\n  receiveMessage(wrapper) {\r\n    if (this.debugNetwork && this.id === 0) {\r\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n    }\r\n\r\n    let msg = wrapper.msg;\r\n\r\n    switch(msg.command) {\r\n      case Messages.Resurrect:\r\n        let r = Math.random();\r\n        //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n        if (r < this.params.resurrectionChance) {\r\n          //console.log(\"Jesus!\");\r\n          this.setAlive(true);\r\n        }\r\n        break;\r\n      case Messages.ImAlive:\r\n        this.neighborState.set(wrapper.from,true);\r\n        break;\r\n      case Messages.ImDead:\r\n        this.neighborState.set(wrapper.from,false);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /*\r\n    // Simulation methods\r\n    loop(time) {\r\n      if (this.state.state === States.Idle) {\r\n        //if (this.id === 0) console.log(\"time: \" + time + \" next: \" + (this.state.lastCycle + this.params.cycleTime));\r\n        if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n\r\n        if (this.debugSim && this.id == 0) {\r\n          console.log(\"Start Sensing: \" + time);\r\n        }\r\n\r\n        this.state.state = States.Sensing;\r\n        this.state.startedSensing = time;\r\n        this.state.batch = this.state.batch + 1;\r\n        this.state.aliveCount = 0;\r\n\r\n        // Query our neighbors.\r\n        for(let i=0; i < this.neighbors.length; i++) {\r\n          let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n          this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n        }\r\n      } else if (this.state.state === States.Sensing) {\r\n        if (time > this.state.startedSensing + this.params.cycleTime) {\r\n          if (this.debugSim && this.id == 0) {\r\n            console.log(\"End Sensing: \" + time)\r\n          }\r\n          // We've collected as many answers as we are going to get\r\n          if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n            this.setAlive(true);\r\n          } else if (this.state.alive === false) {\r\n\r\n            if (this.state.aliveCount === 3) {\r\n              this.setAlive(true);\r\n            } else {\r\n              if (Math.random() < this.params.spontaneousGeneration) {\r\n                //console.log(\"Spontanous Generate\");\r\n                this.setAlive(true);\r\n                if (Math.random() < this.params.resurrectionChance) {\r\n                  //console.log(\"Awake my brothers!\");\r\n                  // Resurrect your neighbors\r\n                  for(let i=0; i < this.neighbors.length; i++) {\r\n                    let msg = {command:Messages.Resurrect};\r\n                    this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            this.setAlive(false);\r\n          }\r\n\r\n          this.state.state = States.Idle;\r\n          this.state.lastCycle = time;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Receive a network message.  Contains from,to,msg properties\r\n    receiveMessage(wrapper) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n      }\r\n\r\n      let msg = wrapper.msg;\r\n\r\n      if (msg.command === Messages.Resurrect) {\r\n        let r = Math.random();\r\n        //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n        if (r < this.params.resurrectionChance) {\r\n          //console.log(\"Jesus!\");\r\n          this.setAlive(true);\r\n        }\r\n      }\r\n\r\n      if (this.state.state !== States.Sensing) {\r\n        if (this.debugNetwork) {\r\n          console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n        }\r\n        // ignore\r\n        return;\r\n      }\r\n\r\n      switch(msg.command) {\r\n        case Messages.ImAlive:\r\n          if (msg.batch !== this.state.batch) {\r\n            // ignore old batch answer\r\n            return;\r\n          }\r\n\r\n          this.state.aliveCount++;\r\n          break;\r\n        case Messages.AreYouAlive:\r\n          if (this.state.alive === true) {\r\n            this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n          }\r\n          // Do not send a message if dead to preserve bandwidth\r\n          break;\r\n      }\r\n    }\r\n  */\r\n\r\n  render() {\r\n    return <div><h1>Game of Life</h1></div>\r\n  }\r\n}\r\n\r\nexport function ConwayControl(props) {\r\n  const [startPattern,setStartPattern] = useState(props.startPattern);\r\n  const [size,setSize] = useState(props.size);\r\n  const [cycleTime, setCycleTime] = useState(props.cycleTime);\r\n  const [spontaneousGeneration, setSpontaneousGeneration] = useState(props.spontaneousGeneration);\r\n  const [resurrectionChance,setResurrectionChance] = useState(props.resurrectionChance);\r\n\r\n  const submit = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n\r\n    props.paramsChangedAction({\r\n      startPattern:startPattern,\r\n      size:size,\r\n      cycleTime:cycleTime,\r\n      spontaneousGeneration:spontaneousGeneration,\r\n      resurrectionChance:resurrectionChance\r\n    });\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width:\"512px\",\r\n      border: \"1px solid black\",\r\n      padding:\"8px\"\r\n    }}>\r\n      <h1>Game of Life - Agent Control</h1>\r\n      <form onSubmit={submit}>\r\n        <Select style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}\r\n          label=\"Start Pattern\" options={[\"toad\",\"beacon\",\"blinker\",\"random\",\"corners\",\"blank\",\"quadpole\",\"pulsar\",\"test\"]} value={startPattern} onChange={e => setStartPattern(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Size\" required value={size} onChange={e => setSize(parseInt(e.target.value))} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"CycleTime\" required value={cycleTime} onChange={e => setCycleTime(parseInt(e.target.value))} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Spontaneous Generation\" required value={spontaneousGeneration} onChange={e => setSpontaneousGeneration(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Resurrection Chance\" required value={resurrectionChance} onChange={e => setResurrectionChance(e.target.value)} />\r\n        <Button style={{\r\n          width:\"100%\"\r\n        }} type=\"submit\" label=\"Update\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}