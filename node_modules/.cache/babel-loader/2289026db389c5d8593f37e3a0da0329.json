{"ast":null,"code":"import _toConsumableArray from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */export var Agent=/*#__PURE__*/function(){function Agent(context,radio,id,world,size,x,y,z){var rotx=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;var roty=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;var rotz=arguments.length>10&&arguments[10]!==undefined?arguments[10]:0;_classCallCheck(this,Agent);this.marked=false;this.THREE=context;this.radio=radio;this.id=id;this.size=size;this.world=world;this.x=x;this.y=y;this.z=z;this.rotx=rotx;this.roty=roty;this.rotz=rotz;this.state={};this.createMesh();this.neighbors=[];// Validate to catch runtime bugs\nif(typeof id===\"undefined\"){throw new Error(\"Agent.id must be set\");}}_createClass(Agent,[{key:\"setMarked\",value:function setMarked(val){this.marked=val;for(var i=this.group.children.length-1;i>=0;i--){this.group.remove(this.group.children[i]);}this.group.add(this.mesh);if(!this.marked)return;var geometry=new this.THREE.SphereGeometry(this.size*1.3,24,24,0,Math.PI*2,0,Math.PI/2);var material=new this.THREE.MeshBasicMaterial({color:0xFF0000});var marker=new this.THREE.Mesh(geometry,material);marker.position.copy(new this.THREE.Vector3(this.x,this.y,this.z-this.size));marker.rotation.x=this.rotx;marker.rotation.y=this.roty;marker.rotation.z=this.rotz;this.group.add(marker);}},{key:\"getMarked\",value:function getMarked(){return this.marked;}// State should always be a single map for easier serialization\n},{key:\"getState\",value:function getState(){return this.state;}},{key:\"getPosition\",value:function getPosition(){return new this.THREE.Vector3(this.x,this.y,this.z);}},{key:\"createMesh\",value:function createMesh(){this.geometry=new this.THREE.SphereGeometry(this.size,24,24,0,Math.PI*2,0,Math.PI/2);this.material=new this.THREE.MeshBasicMaterial({color:0xFFFFFF});this.mesh=new this.THREE.Mesh(this.geometry,this.material);this.mesh.position.copy(new this.THREE.Vector3(this.x,this.y,this.z));this.mesh.rotation.x=this.rotx;this.mesh.rotation.y=this.roty;this.mesh.rotation.z=this.rotz;this.group=new this.THREE.Group();this.group.add(this.mesh);}// Called only once.  You may modify it but cannot reallocate it.\n},{key:\"getMesh\",value:function getMesh(){return this.group;}// Simulation methods\n},{key:\"loop\",value:function loop(time){}},{key:\"setNeighbors\",value:function setNeighbors(val){this.neighbors=_toConsumableArray(val);}},{key:\"getNeighbors\",value:function getNeighbors(){return this.neighbors;}},{key:\"addNeighbor\",value:function addNeighbor(id){this.neighbors.push(id);}},{key:\"removeNeighbor\",value:function removeNeighbor(id){var index=this.neighbors.indexOf(id);if(index!==-1)this.neighbors.splice(index,1);}},{key:\"receiveMessage\",value:function receiveMessage(msg){}// simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\n}]);return Agent;}();","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/Agent.js"],"names":["Agent","context","radio","id","world","size","x","y","z","rotx","roty","rotz","marked","THREE","state","createMesh","neighbors","Error","val","i","group","children","length","remove","add","mesh","geometry","SphereGeometry","Math","PI","material","MeshBasicMaterial","color","marker","Mesh","position","copy","Vector3","rotation","Group","time","push","index","indexOf","splice","msg"],"mappings":"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","sourcesContent":["/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */\r\nexport class Agent {\r\n  marked = false;\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0) {\r\n    this.THREE = context;\r\n    this.radio = radio;\r\n    this.id = id;\r\n    this.size = size;\r\n    this.world = world;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    this.rotx = rotx;\r\n    this.roty = roty;\r\n    this.rotz = rotz;\r\n    this.state = {};\r\n\r\n    this.createMesh();\r\n    this.neighbors = [];\r\n\r\n    // Validate to catch runtime bugs\r\n    if (typeof id === \"undefined\") {\r\n      throw new Error(\"Agent.id must be set\");\r\n    }\r\n  }\r\n\r\n  setMarked(val) {\r\n    this.marked = val;\r\n\r\n    for (let i = this.group.children.length - 1; i >= 0; i--) {\r\n      this.group.remove(this.group.children[i]);\r\n    }\r\n\r\n    this.group.add(this.mesh);\r\n\r\n    if (!this.marked) return;\r\n\r\n    let geometry = new this.THREE.SphereGeometry(this.size*1.3, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    let material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFF0000,\r\n    });\r\n    let marker = new this.THREE.Mesh(geometry, material);\r\n    marker.position.copy(new this.THREE.Vector3(this.x,this.y,this.z-this.size));\r\n    marker.rotation.x = this.rotx;\r\n    marker.rotation.y = this.roty;\r\n    marker.rotation.z = this.rotz;\r\n\r\n    this.group.add(marker);\r\n  }\r\n\r\n  getMarked() {\r\n    return this.marked;\r\n  }\r\n\r\n  // State should always be a single map for easier serialization\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  getPosition() {\r\n    return new this.THREE.Vector3(this.x,this.y,this.z);\r\n  }\r\n\r\n  createMesh() {\r\n    this.geometry = new this.THREE.SphereGeometry(this.size, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    this.material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFFFFFF,\r\n    });\r\n    this.mesh = new this.THREE.Mesh(this.geometry, this.material);\r\n    this.mesh.position.copy(new this.THREE.Vector3(this.x,this.y,this.z));\r\n    this.mesh.rotation.x = this.rotx;\r\n    this.mesh.rotation.y = this.roty;\r\n    this.mesh.rotation.z = this.rotz;\r\n\r\n    this.group = new this.THREE.Group();\r\n    this.group.add(this.mesh);\r\n  }\r\n\r\n  // Called only once.  You may modify it but cannot reallocate it.\r\n  getMesh() {\r\n    return this.group;\r\n  }\r\n\r\n  // Simulation methods\r\n  loop(time) {\r\n\r\n  }\r\n\r\n  setNeighbors(val) {\r\n    this.neighbors = [...val];\r\n  }\r\n\r\n  getNeighbors() {\r\n    return this.neighbors;\r\n  }\r\n\r\n  addNeighbor(id) {\r\n    this.neighbors.push(id);\r\n  }\r\n\r\n  removeNeighbor(id) {\r\n    let index = this.neighbors.indexOf(id);\r\n    if (index !== -1) this.neighbors.splice(index,1);\r\n  }\r\n\r\n  receiveMessage(msg) {\r\n  }\r\n\r\n  // simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\r\n}\r\n"]},"metadata":{},"sourceType":"module"}