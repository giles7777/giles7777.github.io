{"ast":null,"code":"import { Agent } from \"./Agent\";\nconst States = {\n  Idle: \"Idle\",\n  Sensing: \"Sensing\"\n};\nconst Messages = {\n  AreYouAlive: \"AreYouAlive\",\n  ImAlive: \"ImAlive\"\n};\n/*\r\nAgent based on Conway's Game of Life\r\n */\n\nexport class ConwayAgent extends Agent {\n  constructor(context, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0, params, alive) {\n    super(context, id, world, size, x, y, z, rotx, roty, rotz);\n    this.debugSim = true;\n    this.params = params;\n    this.setAlive(alive);\n    this.state.lastExec = new Date().getTime();\n    this.state.state = States.Idle;\n    this.state.batch = 0;\n    this.state.aliveCount = 0;\n  }\n\n  setAlive(alive) {\n    this.state.alive = alive;\n\n    if (alive) {\n      this.material.color.setHex(0x0000FF);\n    } else {\n      this.material.color.setHex(0x222222);\n    }\n  } // Simulation methods\n\n\n  loop() {\n    let time = new Date().getTime();\n\n    if (this.state.state === States.Idle) {\n      if (time < this.state.lastExec + this.params.cycleTime) return;\n      this.state.state = States.Sensing;\n      this.state.startedSensing = new Date().getTime();\n      this.state.batch = this.state.batch + 1;\n      this.state.aliveCount = 0; // Query our neighbors.\n\n      for (let i = 0; i < this.neighbors.length; i++) {\n        let msg = {\n          command: Messages.AreYouAlive,\n          batch: this.state.batch\n        };\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\n      }\n    } else if (this.state.state === States.Sensing) {\n      if (this.state.aliveCount > 3) {\n        // end sensing early as we are dead\n        this.setAlive(false);\n        this.state.state = States.Idle;\n        return;\n      }\n\n      if (time > this.state.startedSensing + this.params.cycleTime) {\n        // We've collected as many answers as we are going to get\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\n          this.setAlive(true);\n        } else if (this.state.alive === false && this.state.aliveCount === 3) {\n          this.setAlive(true);\n        } else {\n          this.setAlive(false);\n        }\n\n        this.state.state = States.Idle;\n        return;\n      }\n    }\n  }\n\n  receiveMessage(msg) {\n    if (this.state.state !== States.Sensing) {\n      // ignore\n      return;\n    }\n\n    switch (msg.command) {\n      case Messages.ImAlive:\n        if (msg.batch !== this.state.batch) {\n          // ignore old batch answer\n          return;\n        }\n\n        this.state.aliveCount++;\n        break;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["Agent","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","ConwayAgent","constructor","context","id","world","size","x","y","z","rotx","roty","rotz","params","alive","debugSim","setAlive","state","lastExec","Date","getTime","batch","aliveCount","material","color","setHex","loop","time","cycleTime","startedSensing","i","neighbors","length","msg","command","radio","sendMessage","receiveMessage"],"mappings":"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","sourcesContent":["import {Agent} from \"./Agent\";\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\"};\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n  debugSim = true;\r\n\r\n  constructor(context,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setAlive(alive);\r\n    this.state.lastExec = new Date().getTime();\r\n    this.state.state = States.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n    let time = new Date().getTime();\r\n\r\n    if (this.state.state === States.Idle) {\r\n      if (time < this.state.lastExec + this.params.cycleTime) return;\r\n\r\n      this.state.state = States.Sensing;\r\n      this.state.startedSensing = new Date().getTime();\r\n      this.state.batch = this.state.batch + 1;\r\n      this.state.aliveCount = 0;\r\n\r\n      // Query our neighbors.\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    } else if (this.state.state === States.Sensing) {\r\n      if (this.state.aliveCount > 3) {\r\n        // end sensing early as we are dead\r\n        this.setAlive(false);\r\n        this.state.state = States.Idle;\r\n        return;\r\n      }\r\n\r\n      if (time > this.state.startedSensing + this.params.cycleTime) {\r\n        // We've collected as many answers as we are going to get\r\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n          this.setAlive(true);\r\n        } else if (this.state.alive === false && this.state.aliveCount === 3) {\r\n          this.setAlive(true);\r\n        } else {\r\n          this.setAlive(false);\r\n        }\r\n\r\n        this.state.state = States.Idle;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  receiveMessage(msg) {\r\n    if (this.state.state !== States.Sensing) {\r\n      // ignore\r\n      return;\r\n    }\r\n\r\n    switch(msg.command) {\r\n      case Messages.ImAlive:\r\n        if (msg.batch !== this.state.batch) {\r\n          // ignore old batch answer\r\n          return;\r\n        }\r\n\r\n        this.state.aliveCount++;\r\n        break;\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}