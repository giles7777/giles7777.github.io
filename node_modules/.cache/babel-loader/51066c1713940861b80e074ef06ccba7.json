{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Agent } from \"./Agent\";\nimport { Queue } from \"./Queue\";\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n\n};\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\nconst transmissionDelayMax = 50; // ms max\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.messages = [];\n\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n      );\n      this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      const agent1 = new Agent(THREE, 0.1, 2, 0, 0, 0, 0, Math.PI / 2);\n      const agent2 = new Agent(THREE, 0.5, -2, 0, 0);\n      this.agents = [agent1, agent2];\n\n      for (let n = 0; n < this.agents.length; n++) {\n        this.scene.add(this.agents[n].getMesh());\n      }\n\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 200, 0);\n      lights[1].position.set(100, 200, 100);\n      lights[2].position.set(-100, -200, -100); //this.scene.add(lights[0]);\n      //this.scene.add(lights[1]);\n      //this.scene.add(lights[2]);\n    };\n\n    this.startAnimationLoop = () => {\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n      let time = new Date().getTime();\n\n      for (var i = 0; i < messages.size(); i++) {\n        if (messages[i].time < time) {}\n      }\n\n      delta += clock.getDelta();\n\n      if (delta < interval) {\n        return;\n      }\n\n      for (let n = 0; n < this.agents.length; n++) {\n        this.agents[n].updateRender();\n      }\n\n      this.renderer.render(this.scene, this.camera);\n      delta = delta % interval;\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  } // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n\n\n  sendMessage(id, msg) {\n    messages.push(new {\n      id: id,\n      msg: msg,\n      time: new Date().getTime() + Math.random() * transmissionDelayMax\n    }());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: ref => this.el = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","THREE","OrbitControls","Agent","Queue","style","height","delta","clock","Clock","interval","transmissionDelayMax","App","messages","sceneSetup","width","el","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","addCustomSceneObjects","agent1","Math","PI","agent2","agents","n","length","add","getMesh","lights","PointLight","set","startAnimationLoop","requestID","window","requestAnimationFrame","time","Date","getTime","i","size","getDelta","updateRender","render","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","sendMessage","id","msg","push","random","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Agent } from \"./Agent\"\nimport { Queue } from \"./Queue\";\n\n\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n};\n\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\n\nconst transmissionDelayMax = 50;  // ms max\n\nclass App extends Component {\n\n  messages = [];\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n    );\n    this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n  };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    const agent1 = new Agent(THREE,0.1,2,0,0,0,0,Math.PI/2);\n    const agent2 = new Agent(THREE,0.5,-2,0,0);\n    this.agents = [agent1,agent2];\n\n    for(let n=0; n < this.agents.length; n++) {\n      this.scene.add(this.agents[n].getMesh());\n    }\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n\n    //this.scene.add(lights[0]);\n    //this.scene.add(lights[1]);\n    //this.scene.add(lights[2]);\n  };\n\n  startAnimationLoop = () => {\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    let time = new Date().getTime();\n    for(var i=0; i < messages.size(); i++) {\n      if (messages[i].time < time) {\n\n      }\n    }\n\n    delta += clock.getDelta();\n    if (delta < interval) {\n      return;\n    }\n\n    for(let n=0; n < this.agents.length; n++) {\n      this.agents[n].updateRender();\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    delta = delta % interval;\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  sendMessage(id,msg) {\n    messages.push(new {id:id,msg:msg,time: new Date().getTime() + Math.random() * transmissionDelayMax});\n  }\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}