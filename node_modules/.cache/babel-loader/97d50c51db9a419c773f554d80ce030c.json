{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\ConwayAgent.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport { Agent } from \"./Agent\";\nimport { Button } from \"@rmwc/button\";\nimport { TextField } from \"@rmwc/textfield\";\nimport '@material/textfield/dist/mdc.textfield.css';\nconst States = {\n  Idle: \"Idle\",\n  Sensing: \"Sensing\"\n};\nconst Messages = {\n  AreYouAlive: \"AreYouAlive\",\n  ImAlive: \"ImAlive\"\n};\n/*\r\nAgent based on Conway's Game of Life\r\n */\n\nexport class ConwayAgent extends Agent {\n  constructor(context, radio, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0, params, alive) {\n    super(context, radio, id, world, size, x, y, z, rotx, roty, rotz);\n    this.debugSim = false;\n    this.debugNetwork = false;\n    this.params = params;\n    this.setAlive(alive);\n    this.state.lastCycle = 0;\n    this.state.state = States.Idle;\n    this.state.batch = 0;\n    this.state.aliveCount = 0;\n  }\n\n  setAlive(alive) {\n    this.state.alive = alive;\n\n    if (alive) {\n      this.material.color.setHex(0x0000FF);\n    } else {\n      this.material.color.setHex(0x222222);\n    }\n  } // Simulation methods\n\n\n  loop() {\n    let time = new Date().getTime();\n\n    if (this.state.state === States.Idle) {\n      if (time < this.state.lastCycle + this.params.cycleTime) return;\n      this.state.state = States.Sensing;\n      this.state.startedSensing = new Date().getTime();\n      this.state.batch = this.state.batch + 1;\n      this.state.aliveCount = 0; // Query our neighbors.\n\n      for (let i = 0; i < this.neighbors.length; i++) {\n        let msg = {\n          command: Messages.AreYouAlive,\n          batch: this.state.batch\n        };\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\n      }\n    } else if (this.state.state === States.Sensing) {\n      if (this.state.aliveCount > 3) {\n        // end sensing early as we are dead\n        this.setAlive(false);\n        this.state.state = States.Idle;\n        this.state.lastCycle = new Date().getTime();\n        return;\n      }\n\n      if (time > this.state.startedSensing + this.params.cycleTime) {\n        // We've collected as many answers as we are going to get\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\n          this.setAlive(true);\n        } else if (this.state.alive === false && this.state.aliveCount === 3) {\n          this.setAlive(true);\n        } else {\n          this.setAlive(false);\n        }\n\n        this.state.state = States.Idle;\n        this.state.lastCycle = new Date().getTime();\n        return;\n      }\n    }\n  } // Receive a network message.  Contains from,to,msg properties\n\n\n  receiveMessage(wrapper) {\n    if (this.debugNetwork) {\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\n    }\n\n    if (this.state.state !== States.Sensing) {\n      if (this.debugNetwork) {\n        console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\n      } // ignore\n\n\n      return;\n    }\n\n    let msg = wrapper.msg;\n\n    switch (msg.command) {\n      case Messages.ImAlive:\n        if (msg.batch !== this.state.batch) {\n          // ignore old batch answer\n          return;\n        }\n\n        this.state.aliveCount++;\n        break;\n\n      case Messages.AreYouAlive:\n        if (this.state.alive === true) {\n          this.radio.sendMessage(this.id, wrapper.from, {\n            command: Messages.ImAlive,\n            batch: msg.batch\n          });\n        }\n\n      // Do not send a message if dead to preserve bandwidth\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"Game of Like\"));\n  }\n\n}\nexport function ConwayControl(props) {\n  const [size, setSize] = useState(\"25\");\n\n  const submit = evt => {\n    if (evt) evt.preventDefault();\n    props.paramsChangedAction({\n      size: size\n    });\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Game of Life - Agent Params\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"80%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Size\",\n    required: true,\n    onChange: e => setSize(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Update\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["React","Component","memo","useEffect","useState","Agent","Button","TextField","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","ConwayAgent","constructor","context","radio","id","world","size","x","y","z","rotx","roty","rotz","params","alive","debugSim","debugNetwork","setAlive","state","lastCycle","batch","aliveCount","material","color","setHex","loop","time","Date","getTime","cycleTime","startedSensing","i","neighbors","length","msg","command","sendMessage","receiveMessage","wrapper","console","log","JSON","stringify","from","render","ConwayControl","props","setSize","submit","evt","preventDefault","paramsChangedAction","width","height","margin","display","marginTop","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\r\n\r\nimport {Agent} from \"./Agent\";\r\nimport {Button} from \"@rmwc/button\";\r\nimport {TextField} from \"@rmwc/textfield\"\r\nimport '@material/textfield/dist/mdc.textfield.css';\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\"};\r\n\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n  debugSim = false;\r\n  debugNetwork = false;\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,radio,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setAlive(alive);\r\n    this.state.lastCycle = 0;\r\n    this.state.state = States.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n    let time = new Date().getTime();\r\n\r\n    if (this.state.state === States.Idle) {\r\n      if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n\r\n      this.state.state = States.Sensing;\r\n      this.state.startedSensing = new Date().getTime();\r\n      this.state.batch = this.state.batch + 1;\r\n      this.state.aliveCount = 0;\r\n\r\n      // Query our neighbors.\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    } else if (this.state.state === States.Sensing) {\r\n      if (this.state.aliveCount > 3) {\r\n        // end sensing early as we are dead\r\n        this.setAlive(false);\r\n        this.state.state = States.Idle;\r\n        this.state.lastCycle = new Date().getTime();\r\n        return;\r\n      }\r\n\r\n      if (time > this.state.startedSensing + this.params.cycleTime) {\r\n        // We've collected as many answers as we are going to get\r\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n          this.setAlive(true);\r\n        } else if (this.state.alive === false && this.state.aliveCount === 3) {\r\n          this.setAlive(true);\r\n        } else {\r\n          this.setAlive(false);\r\n        }\r\n\r\n        this.state.state = States.Idle;\r\n        this.state.lastCycle = new Date().getTime();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Receive a network message.  Contains from,to,msg properties\r\n  receiveMessage(wrapper) {\r\n    if (this.debugNetwork) {\r\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n    }\r\n\r\n    if (this.state.state !== States.Sensing) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n      }\r\n      // ignore\r\n      return;\r\n    }\r\n\r\n    let msg = wrapper.msg;\r\n\r\n    switch(msg.command) {\r\n      case Messages.ImAlive:\r\n        if (msg.batch !== this.state.batch) {\r\n          // ignore old batch answer\r\n          return;\r\n        }\r\n\r\n        this.state.aliveCount++;\r\n        break;\r\n      case Messages.AreYouAlive:\r\n        if (this.state.alive === true) {\r\n          this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n        }\r\n\r\n        // Do not send a message if dead to preserve bandwidth\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div><h1>Game of Like</h1></div>\r\n  }\r\n}\r\n\r\nexport function ConwayControl(props) {\r\n  const [size,setSize] = useState(\"25\");\r\n\r\n  const submit = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n\r\n    props.paramsChangedAction({size:size});\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <h1>Game of Life - Agent Params</h1>\r\n      <form onSubmit={submit}>\r\n        <TextField style={{\r\n          width:\"80%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Size\" required onChange={e => setSize(e.target.value)} />\r\n        <Button type=\"submit\" label=\"Update\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}