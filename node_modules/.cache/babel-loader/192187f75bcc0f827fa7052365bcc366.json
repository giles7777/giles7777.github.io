{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\";\nimport { ConwayAgent, ConwayControl } from \"./ConwayAgent\";\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\";\nimport CameraControl from \"./CameraControl\";\nconst style = {\n  height: 512,\n  maxWidth: 1024\n};\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\nconst transmissionDelayMax = 0; // ms max\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.debugNetwork = false;\n    this.debugNeighbors = false;\n    this.messages = [];\n    this.simPaused = true;\n    this.pauseTime = Number.MAX_SAFE_INTEGER;\n    this.agentParams = {\n      startPattern: \"test\",\n      size: 10,\n      cycleTime: 1900,\n      spontaneousGeneration: 0.001 * 0,\n      resurrectionChance: 0.5 * 0\n    };\n\n    this.worldSetup = () => {\n      this.world = new World();\n    };\n\n    this.agentSetup = params => {\n      let id = 0;\n      /*\n          const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n          const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n          const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n          this.agents = [agent0,agent1];\n      \n       */\n\n      /*\n          const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n          const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n          const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n          const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n          const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n          const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n          const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n          const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n          const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n          const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n          const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n          const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n      \n          this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n       */\n\n      let random = false;\n      let chance = 0.4;\n      let quadpole = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];\n      let blank = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];\n      let corners = [[1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1]];\n      let test = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1]];\n      let pattern;\n\n      if (params.startPattern === \"random\") {\n        random = true;\n      } else {\n        switch (params.startPattern) {\n          case \"quadpole\":\n            pattern = quadpole;\n            break;\n\n          case \"blank\":\n            pattern = blank;\n            break;\n\n          case \"test\":\n            pattern = test;\n            break;\n\n          case \"corners\":\n            pattern = corners;\n            break;\n        }\n      }\n\n      console.log(\"random: \" + random + \" pattern: \" + params.startPattern);\n      let size = pattern.length;\n      size = params.size;\n      this.agents = [];\n      let patX = pattern[0].length;\n      let patY = pattern.length;\n\n      for (let x = 0; x < size; x++) {\n        for (let y = 0; y < size; y++) {\n          let alive = true;\n\n          if (random) {\n            alive = Math.random() < chance;\n          } else {\n            let px = x;\n            let py = y;\n\n            if (px < patX && py < patY) {\n              alive = pattern[x][y] === 1;\n            } else {\n              alive = false;\n            }\n          }\n\n          const agent = new ConwayAgent(THREE, this, id++, this.world, 0.1, x - size / 2, -y + size / 2, 0, Math.PI / 2, 0, 0, params, alive);\n          this.agents.push(agent);\n        }\n      }\n    };\n\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n      );\n      this.camera.position.z = 10; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      for (let n = 0; n < this.agents.length; n++) {\n        this.scene.add(this.agents[n].getMesh());\n      }\n\n      this.calcAgentNeighbors(8);\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 200, 0);\n      lights[1].position.set(100, 200, 100);\n      lights[2].position.set(-100, -200, -100); //this.scene.add(lights[0]);\n      //this.scene.add(lights[1]);\n      //this.scene.add(lights[2]);\n    };\n\n    this.startAnimationLoop = () => {\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n      if (this.simPaused) return; // Handle delivery of messages\n\n      let time = new Date().getTime();\n      let remove = [];\n\n      for (let i = 0; i < this.messages.length; i++) {\n        if (this.messages[i].time < time) {\n          if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n\n          if (typeof this.messages[i].to === 'undefined') {\n            console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]));\n          } else {\n            this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n          }\n\n          remove.push(i);\n        }\n      }\n\n      for (let i = 0; i < remove.length; i++) {\n        this.messages.splice(remove[i] - i, 1);\n      } // Handle clocking of agents\n      // TODO: Likely we should randomally walk for better simulation of real world parallelism\n\n\n      for (let i = 0; i < this.agents.length; i++) {\n        this.agents[i].loop();\n      }\n\n      if (time > this.pauseTime) {\n        this.simPaused = true;\n        this.renderer.render(this.scene, this.camera);\n        return;\n      }\n\n      delta += clock.getDelta();\n\n      if (delta < interval) {\n        return;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n      delta = delta % interval;\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup(this.agentParams);\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize); // Render once so we see the initial pattern\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  } // Setup the world environment.\n\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for (let agentIdx = 0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({\n            dist: dist,\n            agentIdx: i\n          });\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      }); //console.log(distances);\n\n      let neighbors = [];\n      let len = Math.min(max, distances.length);\n\n      for (let i = 0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n  }\n\n  sendMessage(from, to, msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({\n      from: from,\n      to: to,\n      msg: msg,\n      time: new Date().getTime() + Math.random() * transmissionDelayMax\n    });\n  }\n\n  handleSimPause() {\n    this.simPaused = true;\n  }\n\n  handleSimPlay() {\n    this.simPaused = false;\n  } // Play the sim for one cycle time\n\n\n  handleSimStep() {\n    this.simPaused = false;\n    this.pauseTime = new Date().getTime() + this.agentParams.cycleTime;\n  }\n\n  handleSimReset() {\n    this.simPaused = true;\n    this.messages = [];\n\n    while (this.scene.children.length > 0) {\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup(this.agentParams);\n    this.addCustomSceneObjects();\n    this.simPaused = false;\n  }\n\n  handleCameraReset() {\n    this.controls.reset();\n  }\n\n  handleAgentParamsChanged(params) {\n    console.log(\"Params changed: \" + JSON.stringify(params));\n    this.agentParams = { ...this.agentParams,\n      ...params\n    };\n    this.handleSimReset();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: ref => this.el = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SimControl, {\n      resetAction: e => this.handleSimReset(),\n      pauseAction: e => this.handleSimPause(),\n      playAction: e => this.handleSimPlay(),\n      stepAction: e => this.handleSimStep(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CameraControl, {\n      resetAction: e => this.handleCameraReset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(ConwayControl, Object.assign({}, this.agentParams, {\n      paramsChangedAction: (param, val) => this.handleAgentParamsChanged(param, val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }\n    }))));\n  }\n\n}\n\nexport default memo(App);","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","memo","useEffect","useState","THREE","OrbitControls","World","ConwayAgent","ConwayControl","Queue","SimControl","CameraControl","style","height","maxWidth","delta","clock","Clock","interval","transmissionDelayMax","App","debugNetwork","debugNeighbors","messages","simPaused","pauseTime","Number","MAX_SAFE_INTEGER","agentParams","startPattern","size","cycleTime","spontaneousGeneration","resurrectionChance","worldSetup","world","agentSetup","params","id","random","chance","quadpole","blank","corners","test","pattern","console","log","length","agents","patX","patY","x","y","alive","Math","px","py","agent","PI","push","sceneSetup","width","el","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","addCustomSceneObjects","n","add","getMesh","calcAgentNeighbors","lights","PointLight","set","startAnimationLoop","requestID","window","requestAnimationFrame","time","Date","getTime","remove","i","JSON","stringify","to","receiveMessage","splice","loop","render","getDelta","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","max","agentIdx","distances","pos","getPosition","dist","distanceToSquared","sort","a","b","neighbors","len","min","setNeighbors","sendMessage","from","msg","handleSimPause","handleSimPlay","handleSimStep","handleSimReset","children","handleCameraReset","reset","handleAgentParamsChanged","ref","display","e","param","val"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\"\nimport { ConwayAgent,ConwayControl } from \"./ConwayAgent\"\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\"\nimport CameraControl from \"./CameraControl\"\n\nconst style = {\n  height: 512,\n  maxWidth: 1024\n};\n\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\n\nconst transmissionDelayMax = 0;  // ms max\n\nclass App extends Component {\n\n  debugNetwork = false;\n  debugNeighbors = false;\n  messages = [];\n  simPaused = true;\n  pauseTime = Number.MAX_SAFE_INTEGER;\n\n  agentParams = {startPattern:\"test\", size: 10,\n    cycleTime: 1900,\n    spontaneousGeneration: 0.001*0,\n    resurrectionChance: 0.5*0};\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup(this.agentParams);\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n\n    // Render once so we see the initial pattern\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Setup the world environment.\n  worldSetup = () => {\n    this.world = new World();\n  };\n\n  // Setup the agents\n  agentSetup = (params) => {\n    let id = 0;\n\n/*\n    const agent0 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,0,0,0,Math.PI/2,0,params,false);\n    const agent1 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,2,0,0,Math.PI/2,0,params,true);\n    const agent3 = new ConwayAgent(THREE,this,id++,this.world,0.1,0,4,0,0,Math.PI/2,0,params,true);\n    this.agents = [agent0,agent1];\n\n */\n/*\n    const agent0 = new ConwayAgent(THREE,id++,this.world,0.1,2,0.5,0,0,0,Math.PI/2,params,false);\n    const agent1 = new ConwayAgent(THREE,id++,this.world,0.1,2,1.5,0,0,0,Math.PI/2,params,true);\n    const agent2 = new ConwayAgent(THREE,id++,this.world,0.1,2,3,0,0,0,Math.PI/2,params,true);\n    const agent3 = new ConwayAgent(THREE,id++,this.world,0.4,-6,0,0,0,0,0,params,true);\n    const agent4 = new ConwayAgent(THREE,id++,this.world,0.4,-2,0,-5,0,0,0,params,true);\n    const agent5 = new ConwayAgent(THREE,id++,this.world,0.4,2,0,-10,0,0,0,params,true);\n    const agent6 = new ConwayAgent(THREE,id++,this.world,0.1,-12,0.5,-10,0,0,-Math.PI/2,params,true);\n    const agent7 = new ConwayAgent(THREE,id++,this.world,0.1,-12,1.5,-10,0,0,-Math.PI/2,params,true);\n    const agent8 = new ConwayAgent(THREE,id++,this.world,0.1,-12,3,-10,0,0,-Math.PI/2,params,true);\n    const agent9 = new ConwayAgent(THREE,id++,this.world,0.1,-13,0.5,-15,0,0,-Math.PI/2,params,true);\n    const agent10 = new ConwayAgent(THREE,id++,this.world,0.1,-13,1.5,-15,0,0,-Math.PI/2,params,true);\n    const agent11 = new ConwayAgent(THREE,id++,this.world,0.1,-13,3,-15,0,0,-Math.PI/2,params,true);\n\n    this.agents = [agent0,agent1,agent2,agent3,agent4,agent5,agent6,agent7,agent8,agent9,agent10,agent11];\n */\n\n    let random = false;\n    let chance = 0.4;\n    let quadpole = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [1,1,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,0,0,0,0,0],\n      [0,1,0,1,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,1,1,1,1,0,0,0,0],\n      [0,0,0,0,0,0,1,0,0,0],\n      [0,0,0,0,0,1,1,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n    ];\n\n    let blank = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n    ];\n\n    let corners = [\n      [1,1,0,0,0,0,0,0,1,1],\n      [1,0,0,0,0,0,0,0,0,1],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,0,0,0,0,1],\n      [1,1,0,0,0,0,0,0,1,1],\n    ];\n\n    let test = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,0,0,0,0,1],\n      [1,1,0,0,0,0,0,0,1,1],\n    ];\n\n    let pattern;\n\n    if (params.startPattern === \"random\") {\n      random = true;\n    } else {\n      switch(params.startPattern) {\n        case \"quadpole\":\n          pattern = quadpole;\n          break;\n        case \"blank\":\n          pattern = blank;\n          break;\n        case \"test\":\n          pattern = test;\n          break;\n        case \"corners\":\n          pattern = corners;\n          break;\n      }\n    }\n\n    console.log(\"random: \" + random + \" pattern: \" + params.startPattern);\n    let size = pattern.length;\n    size = params.size;\n\n    this.agents = [];\n    let patX = pattern[0].length;\n    let patY = pattern.length;\n\n    for(let x=0; x < size; x++) {\n      for(let y=0; y < size; y++) {\n        let alive = true;\n\n        if (random) {\n          alive = Math.random() < chance;\n        } else {\n          let px = x;\n          let py = y;\n\n          if (px < patX && py < patY) {\n            alive = pattern[x][y] === 1;\n          } else {\n            alive = false;\n          }\n        }\n\n        const agent = new ConwayAgent(THREE,this,id++,this.world,0.1,x-size/2,-y+size/2,0,Math.PI/2,0,0,params,alive);\n        this.agents.push(agent);\n      }\n    }\n  };\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n    );\n    this.camera.position.z = 10; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n  };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    for(let n=0; n < this.agents.length; n++) {\n      this.scene.add(this.agents[n].getMesh());\n    }\n\n    this.calcAgentNeighbors(8);\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n\n    //this.scene.add(lights[0]);\n    //this.scene.add(lights[1]);\n    //this.scene.add(lights[2]);\n  };\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for(let agentIdx=0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({dist: dist, agentIdx: i});\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      });\n\n      //console.log(distances);\n      let neighbors = [];\n      let len = Math.min(max,distances.length);\n\n      for(let i=0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n  }\n\n  startAnimationLoop = () => {\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    if (this.simPaused) return;\n\n    // Handle delivery of messages\n    let time = new Date().getTime();\n\n    let remove = [];\n    for(let i=0; i < this.messages.length; i++) {\n      if (this.messages[i].time < time) {\n        if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n        if (typeof this.messages[i].to === 'undefined') {\n          console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]))\n        } else {\n          this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n        }\n        remove.push(i);\n      }\n    }\n\n    for(let i=0; i < remove.length; i++) {\n      this.messages.splice(remove[i]-i,1);\n    }\n\n    // Handle clocking of agents\n    // TODO: Likely we should randomally walk for better simulation of real world parallelism\n    for(let i=0; i < this.agents.length; i++) {\n      this.agents[i].loop();\n    }\n\n    if (time > this.pauseTime) {\n      this.simPaused = true;\n      this.renderer.render(this.scene, this.camera);\n      return;\n    }\n\n    delta += clock.getDelta();\n    if (delta < interval) {\n      return;\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    delta = delta % interval;\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  sendMessage(from,to,msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({from:from,to:to,msg:msg,time: new Date().getTime() + Math.random() * transmissionDelayMax});\n  }\n\n  handleSimPause() {\n    this.simPaused = true;\n  }\n\n  handleSimPlay() {\n    this.simPaused = false;\n  }\n\n  // Play the sim for one cycle time\n  handleSimStep() {\n    this.simPaused = false;\n    this.pauseTime = new Date().getTime() + this.agentParams.cycleTime;\n  }\n\n  handleSimReset() {\n    this.simPaused = true;\n    this.messages = [];\n\n    while(this.scene.children.length > 0){\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup(this.agentParams);\n    this.addCustomSceneObjects();\n\n    this.simPaused = false;\n  }\n\n  handleCameraReset() {\n    this.controls.reset();\n  }\n\n  handleAgentParamsChanged(params) {\n    console.log(\"Params changed: \" + JSON.stringify(params));\n\n    this.agentParams = {...this.agentParams,...params};\n\n    this.handleSimReset();\n  }\n\n  render() {\n    return <div>\n      <div style={style} ref={ref => (this.el = ref)} />\n      <div style={{\n        display:\"flex\"\n      }} >\n        <div>\n        <SimControl resetAction={e => this.handleSimReset()} pauseAction={e => this.handleSimPause() } playAction={e => this.handleSimPlay() } stepAction={e => this.handleSimStep() }/>\n        <CameraControl resetAction={e => this.handleCameraReset()} />\n        </div>\n        <ConwayControl {...this.agentParams} paramsChangedAction = {(param,val) => this.handleAgentParamsChanged(param,val) } />\n      </div>\n    </div>\n  }\n}\n\nexport default memo(App);\n"]},"metadata":{},"sourceType":"module"}