{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\ConwayAgent.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport { Agent } from \"./Agent\";\nimport { Button } from \"@rmwc/button\";\nimport { TextField } from \"@rmwc/textfield\";\nimport { Select } from \"@rmwc/select\";\nimport '@material/textfield/dist/mdc.textfield.css';\nimport '@rmwc/select/select.css';\nimport '@material/select/dist/mdc.select.css';\nimport '@material/floating-label/dist/mdc.floating-label.css';\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\nimport '@material/list/dist/mdc.list.css';\nimport '@material/menu/dist/mdc.menu.css';\nimport '@material/menu-surface/dist/mdc.menu-surface.css';\nimport '@material/ripple/dist/mdc.ripple.css';\nconst States = {\n  Idle: \"Idle\",\n  Sensing: \"Sensing\"\n};\nconst Messages = {\n  AreYouAlive: \"AreYouAlive\",\n  ImAlive: \"ImAlive\",\n  ImDead: \"ImDead\",\n  Resurrect: \"Resurrect\"\n};\n/*\r\nAgent based on Conway's Game of Life\r\n */\n\nexport class ConwayAgent extends Agent {\n  constructor(context, radio, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0, params, alive) {\n    super(context, radio, id, world, size, x, y, z, rotx, roty, rotz);\n    this.debugSim = true;\n    this.debugNetwork = false;\n    this.lastStateSend = 0;\n    this.neighborState = {};\n    this.params = params;\n    this.setAlive(alive);\n    this.state.lastCycle = 0;\n    this.state.state = States.Idle;\n    this.state.batch = 0;\n    this.state.aliveCount = 0;\n  }\n\n  setAlive(alive) {\n    this.state.alive = alive;\n\n    if (alive) {\n      this.material.color.setHex(0x0000FF);\n    } else {\n      this.material.color.setHex(0x222222);\n    }\n  }\n\n  loop(time) {\n    if (time > this.lastStateSend + this.params.stateSendTime) {\n      this.lastStateSend = time;\n      let msg = {\n        command: this.state ? Messages.ImAlive : Messages.ImDead\n      };\n\n      for (let i = 0; i < this.neighbors.length; i++) {\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\n      }\n    }\n\n    if (time > this.lastCycle + this.params.cycleTime) {\n      this.lastCycle = time();\n      let aliveCount = 0;\n      const iter = this.neighborState.values();\n\n      for (const item of iter) {\n        if (item === true) aliveCount++;\n      }\n\n      if (this.state.alive === true && (aliveCount === 2 || aliveCount === 3)) {\n        this.setAlive(true);\n      } else if (this.state.alive === false) {\n        if (aliveCount === 3) {\n          this.setAlive(true);\n        } else {\n          if (Math.random() < this.params.spontaneousGeneration) {\n            //console.log(\"Spontanous Generate\");\n            this.setAlive(true);\n\n            if (Math.random() < this.params.resurrectionChance) {\n              //console.log(\"Awake my brothers!\");\n              // Resurrect your neighbors\n              for (let i = 0; i < this.neighbors.length; i++) {\n                let msg = {\n                  command: Messages.Resurrect\n                };\n                this.radio.sendMessage(this.id, this.neighbors[i], msg);\n              }\n            }\n          }\n        }\n      } else {\n        this.setAlive(false);\n      }\n    }\n  } // Receive a network message.  Contains from,to,msg properties\n\n\n  receiveMessage(wrapper) {\n    if (this.debugNetwork) {\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\n    }\n\n    let msg = wrapper.msg;\n\n    if (msg.command === Messages.Resurrect) {\n      let r = Math.random(); //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\n\n      if (r < this.params.resurrectionChance) {\n        //console.log(\"Jesus!\");\n        this.setAlive(true);\n      }\n    }\n\n    switch (msg.command) {\n      case Messages.ImAlive:\n        this.neighborState[msg.from] = true;\n        break;\n\n      case Messages.ImDead:\n        this.neighborState[msg.from] = false;\n        break;\n    }\n  }\n  /*\r\n    // Simulation methods\r\n    loop(time) {\r\n      if (this.state.state === States.Idle) {\r\n        //if (this.id === 0) console.log(\"time: \" + time + \" next: \" + (this.state.lastCycle + this.params.cycleTime));\r\n        if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n          if (this.debugSim && this.id == 0) {\r\n          console.log(\"Start Sensing: \" + time);\r\n        }\r\n          this.state.state = States.Sensing;\r\n        this.state.startedSensing = time;\r\n        this.state.batch = this.state.batch + 1;\r\n        this.state.aliveCount = 0;\r\n          // Query our neighbors.\r\n        for(let i=0; i < this.neighbors.length; i++) {\r\n          let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n          this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n        }\r\n      } else if (this.state.state === States.Sensing) {\r\n        if (time > this.state.startedSensing + this.params.cycleTime) {\r\n          if (this.debugSim && this.id == 0) {\r\n            console.log(\"End Sensing: \" + time)\r\n          }\r\n          // We've collected as many answers as we are going to get\r\n          if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n            this.setAlive(true);\r\n          } else if (this.state.alive === false) {\r\n              if (this.state.aliveCount === 3) {\r\n              this.setAlive(true);\r\n            } else {\r\n              if (Math.random() < this.params.spontaneousGeneration) {\r\n                //console.log(\"Spontanous Generate\");\r\n                this.setAlive(true);\r\n                if (Math.random() < this.params.resurrectionChance) {\r\n                  //console.log(\"Awake my brothers!\");\r\n                  // Resurrect your neighbors\r\n                  for(let i=0; i < this.neighbors.length; i++) {\r\n                    let msg = {command:Messages.Resurrect};\r\n                    this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            this.setAlive(false);\r\n          }\r\n            this.state.state = States.Idle;\r\n          this.state.lastCycle = time;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n      // Receive a network message.  Contains from,to,msg properties\r\n    receiveMessage(wrapper) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n      }\r\n        let msg = wrapper.msg;\r\n        if (msg.command === Messages.Resurrect) {\r\n        let r = Math.random();\r\n        //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n        if (r < this.params.resurrectionChance) {\r\n          //console.log(\"Jesus!\");\r\n          this.setAlive(true);\r\n        }\r\n      }\r\n        if (this.state.state !== States.Sensing) {\r\n        if (this.debugNetwork) {\r\n          console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n        }\r\n        // ignore\r\n        return;\r\n      }\r\n        switch(msg.command) {\r\n        case Messages.ImAlive:\r\n          if (msg.batch !== this.state.batch) {\r\n            // ignore old batch answer\r\n            return;\r\n          }\r\n            this.state.aliveCount++;\r\n          break;\r\n        case Messages.AreYouAlive:\r\n          if (this.state.alive === true) {\r\n            this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n          }\r\n          // Do not send a message if dead to preserve bandwidth\r\n          break;\r\n      }\r\n    }\r\n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, \"Game of Life\"));\n  }\n\n}\nexport function ConwayControl(props) {\n  const [startPattern, setStartPattern] = useState(props.startPattern);\n  const [size, setSize] = useState(props.size);\n  const [cycleTime, setCycleTime] = useState(props.cycleTime);\n  const [spontaneousGeneration, setSpontaneousGeneration] = useState(props.spontaneousGeneration);\n  const [resurrectionChance, setResurrectionChance] = useState(props.resurrectionChance);\n\n  const submit = evt => {\n    if (evt) evt.preventDefault();\n    props.paramsChangedAction({\n      startPattern: startPattern,\n      size: size,\n      cycleTime: cycleTime,\n      spontaneousGeneration: spontaneousGeneration,\n      resurrectionChance: resurrectionChance\n    });\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"512px\",\n      border: \"1px solid black\",\n      padding: \"8px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }, \"Game of Life - Agent Control\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: \"100%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Start Pattern\",\n    options: [\"random\", \"corners\", \"blank\", \"quadpole\", \"test\"],\n    value: startPattern,\n    onChange: e => setStartPattern(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"100%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Size\",\n    required: true,\n    value: size,\n    onChange: e => setSize(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"100%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"CycleTime\",\n    required: true,\n    value: cycleTime,\n    onChange: e => setCycleTime(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"100%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Spontaneous Generation\",\n    required: true,\n    value: spontaneousGeneration,\n    onChange: e => setSpontaneousGeneration(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"100%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Resurrection Chance\",\n    required: true,\n    value: resurrectionChance,\n    onChange: e => setResurrectionChance(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    type: \"submit\",\n    label: \"Update\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["React","Component","memo","useEffect","useState","Agent","Button","TextField","Select","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","ImDead","Resurrect","ConwayAgent","constructor","context","radio","id","world","size","x","y","z","rotx","roty","rotz","params","alive","debugSim","debugNetwork","lastStateSend","neighborState","setAlive","state","lastCycle","batch","aliveCount","material","color","setHex","loop","time","stateSendTime","msg","command","i","neighbors","length","sendMessage","cycleTime","iter","values","item","Math","random","spontaneousGeneration","resurrectionChance","receiveMessage","wrapper","console","log","JSON","stringify","r","from","render","ConwayControl","props","startPattern","setStartPattern","setSize","setCycleTime","setSpontaneousGeneration","setResurrectionChance","submit","evt","preventDefault","paramsChangedAction","width","border","padding","height","margin","display","marginTop","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\r\n\r\nimport {Agent} from \"./Agent\";\r\nimport {Button} from \"@rmwc/button\";\r\nimport {TextField} from \"@rmwc/textfield\"\r\nimport {Select} from \"@rmwc/select\"\r\n\r\nimport '@material/textfield/dist/mdc.textfield.css';\r\nimport '@rmwc/select/select.css';\r\nimport '@material/select/dist/mdc.select.css';\r\nimport '@material/floating-label/dist/mdc.floating-label.css';\r\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\r\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\r\nimport '@material/list/dist/mdc.list.css';\r\nimport '@material/menu/dist/mdc.menu.css';\r\nimport '@material/menu-surface/dist/mdc.menu-surface.css';\r\nimport '@material/ripple/dist/mdc.ripple.css';\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\",ImDead:\"ImDead\",Resurrect:\"Resurrect\"};\r\n\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n  debugSim = true;\r\n  debugNetwork = false;\r\n  lastStateSend = 0;\r\n  neighborState = {}\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,radio,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setAlive(alive);\r\n    this.state.lastCycle = 0;\r\n    this.state.state = States.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  loop(time) {\r\n    if (time > this.lastStateSend + this.params.stateSendTime) {\r\n      this.lastStateSend = time;\r\n      let msg = {command:this.state?Messages.ImAlive:Messages.ImDead};\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    }\r\n\r\n    if (time > this.lastCycle + this.params.cycleTime) {\r\n      this.lastCycle = time();\r\n      let aliveCount = 0;\r\n      const iter = this.neighborState.values();\r\n      for(const item of iter) {\r\n        if (item === true) aliveCount++;\r\n      }\r\n\r\n      if (this.state.alive === true && (aliveCount === 2 || aliveCount === 3)) {\r\n        this.setAlive(true);\r\n      } else if (this.state.alive === false) {\r\n\r\n        if (aliveCount === 3) {\r\n          this.setAlive(true);\r\n        } else {\r\n          if (Math.random() < this.params.spontaneousGeneration) {\r\n            //console.log(\"Spontanous Generate\");\r\n            this.setAlive(true);\r\n            if (Math.random() < this.params.resurrectionChance) {\r\n              //console.log(\"Awake my brothers!\");\r\n              // Resurrect your neighbors\r\n              for(let i=0; i < this.neighbors.length; i++) {\r\n                let msg = {command:Messages.Resurrect};\r\n                this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        this.setAlive(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Receive a network message.  Contains from,to,msg properties\r\n  receiveMessage(wrapper) {\r\n    if (this.debugNetwork) {\r\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n    }\r\n\r\n    let msg = wrapper.msg;\r\n\r\n    if (msg.command === Messages.Resurrect) {\r\n      let r = Math.random();\r\n      //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n      if (r < this.params.resurrectionChance) {\r\n        //console.log(\"Jesus!\");\r\n        this.setAlive(true);\r\n      }\r\n    }\r\n\r\n    switch(msg.command) {\r\n      case Messages.ImAlive:\r\n        this.neighborState[msg.from] = true;\r\n        break;\r\n      case Messages.ImDead:\r\n        this.neighborState[msg.from] = false;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /*\r\n    // Simulation methods\r\n    loop(time) {\r\n      if (this.state.state === States.Idle) {\r\n        //if (this.id === 0) console.log(\"time: \" + time + \" next: \" + (this.state.lastCycle + this.params.cycleTime));\r\n        if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n\r\n        if (this.debugSim && this.id == 0) {\r\n          console.log(\"Start Sensing: \" + time);\r\n        }\r\n\r\n        this.state.state = States.Sensing;\r\n        this.state.startedSensing = time;\r\n        this.state.batch = this.state.batch + 1;\r\n        this.state.aliveCount = 0;\r\n\r\n        // Query our neighbors.\r\n        for(let i=0; i < this.neighbors.length; i++) {\r\n          let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n          this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n        }\r\n      } else if (this.state.state === States.Sensing) {\r\n        if (time > this.state.startedSensing + this.params.cycleTime) {\r\n          if (this.debugSim && this.id == 0) {\r\n            console.log(\"End Sensing: \" + time)\r\n          }\r\n          // We've collected as many answers as we are going to get\r\n          if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n            this.setAlive(true);\r\n          } else if (this.state.alive === false) {\r\n\r\n            if (this.state.aliveCount === 3) {\r\n              this.setAlive(true);\r\n            } else {\r\n              if (Math.random() < this.params.spontaneousGeneration) {\r\n                //console.log(\"Spontanous Generate\");\r\n                this.setAlive(true);\r\n                if (Math.random() < this.params.resurrectionChance) {\r\n                  //console.log(\"Awake my brothers!\");\r\n                  // Resurrect your neighbors\r\n                  for(let i=0; i < this.neighbors.length; i++) {\r\n                    let msg = {command:Messages.Resurrect};\r\n                    this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            this.setAlive(false);\r\n          }\r\n\r\n          this.state.state = States.Idle;\r\n          this.state.lastCycle = time;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Receive a network message.  Contains from,to,msg properties\r\n    receiveMessage(wrapper) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n      }\r\n\r\n      let msg = wrapper.msg;\r\n\r\n      if (msg.command === Messages.Resurrect) {\r\n        let r = Math.random();\r\n        //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n        if (r < this.params.resurrectionChance) {\r\n          //console.log(\"Jesus!\");\r\n          this.setAlive(true);\r\n        }\r\n      }\r\n\r\n      if (this.state.state !== States.Sensing) {\r\n        if (this.debugNetwork) {\r\n          console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n        }\r\n        // ignore\r\n        return;\r\n      }\r\n\r\n      switch(msg.command) {\r\n        case Messages.ImAlive:\r\n          if (msg.batch !== this.state.batch) {\r\n            // ignore old batch answer\r\n            return;\r\n          }\r\n\r\n          this.state.aliveCount++;\r\n          break;\r\n        case Messages.AreYouAlive:\r\n          if (this.state.alive === true) {\r\n            this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n          }\r\n          // Do not send a message if dead to preserve bandwidth\r\n          break;\r\n      }\r\n    }\r\n  */\r\n\r\n  render() {\r\n    return <div><h1>Game of Life</h1></div>\r\n  }\r\n}\r\n\r\nexport function ConwayControl(props) {\r\n  const [startPattern,setStartPattern] = useState(props.startPattern);\r\n  const [size,setSize] = useState(props.size);\r\n  const [cycleTime, setCycleTime] = useState(props.cycleTime);\r\n  const [spontaneousGeneration, setSpontaneousGeneration] = useState(props.spontaneousGeneration);\r\n  const [resurrectionChance,setResurrectionChance] = useState(props.resurrectionChance);\r\n\r\n  const submit = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n\r\n    props.paramsChangedAction({\r\n      startPattern:startPattern,\r\n      size:size,\r\n      cycleTime:cycleTime,\r\n      spontaneousGeneration:spontaneousGeneration,\r\n      resurrectionChance:resurrectionChance\r\n    });\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width:\"512px\",\r\n      border: \"1px solid black\",\r\n      padding:\"8px\"\r\n    }}>\r\n      <h1>Game of Life - Agent Control</h1>\r\n      <form onSubmit={submit}>\r\n        <Select style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}\r\n          label=\"Start Pattern\" options={[\"random\",\"corners\",\"blank\",\"quadpole\",\"test\"]} value={startPattern} onChange={e => setStartPattern(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Size\" required value={size} onChange={e => setSize(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"CycleTime\" required value={cycleTime} onChange={e => setCycleTime(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Spontaneous Generation\" required value={spontaneousGeneration} onChange={e => setSpontaneousGeneration(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"100%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Resurrection Chance\" required value={resurrectionChance} onChange={e => setResurrectionChance(e.target.value)} />\r\n        <Button style={{\r\n          width:\"100%\"\r\n        }} type=\"submit\" label=\"Update\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}