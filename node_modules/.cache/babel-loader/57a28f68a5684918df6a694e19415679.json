{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCSelectHelperTextFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSelectHelperTextFoundation, _super);\n\n  function MDCSelectHelperTextFoundation(adapter) {\n    return _super.call(this, tslib_1.__assign({}, MDCSelectHelperTextFoundation.defaultAdapter, adapter)) || this;\n  }\n\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        removeAttr: function () {\n          return undefined;\n        },\n        setContent: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the content of the helper text field.\n   */\n\n  MDCSelectHelperTextFoundation.prototype.setContent = function (content) {\n    this.adapter_.setContent(content);\n  };\n  /**\n   *  Sets the persistency of the helper text.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setPersistent = function (isPersistent) {\n    if (isPersistent) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    }\n  };\n  /**\n   * @param isValidation True to make the helper text act as an error validation message.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {\n    if (isValidation) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  };\n  /**\n   * Makes the helper text visible to screen readers.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {\n    this.adapter_.removeAttr(strings.ARIA_HIDDEN);\n  };\n  /**\n   * Sets the validity of the helper text based on the select validity.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {\n    var helperTextIsPersistent = this.adapter_.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    var helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    var validationMsgNeedsDisplay = helperTextIsValidationMsg && !selectIsValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setAttr(strings.ROLE, 'alert');\n    } else {\n      this.adapter_.removeAttr(strings.ROLE);\n    }\n\n    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n      this.hide_();\n    }\n  };\n  /**\n   * Hides the help text from screen readers.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.hide_ = function () {\n    this.adapter_.setAttr(strings.ARIA_HIDDEN, 'true');\n  };\n\n  return MDCSelectHelperTextFoundation;\n}(MDCFoundation);\n\nexport { MDCSelectHelperTextFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSelectHelperTextFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCSelectHelperTextFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCSelectHelperTextFoundation, _super);\n    function MDCSelectHelperTextFoundation(adapter) {\n        return _super.call(this, tslib_1.__assign({}, MDCSelectHelperTextFoundation.defaultAdapter, adapter)) || this;\n    }\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                setAttr: function () { return undefined; },\n                removeAttr: function () { return undefined; },\n                setContent: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the content of the helper text field.\n     */\n    MDCSelectHelperTextFoundation.prototype.setContent = function (content) {\n        this.adapter_.setContent(content);\n    };\n    /**\n     *  Sets the persistency of the helper text.\n     */\n    MDCSelectHelperTextFoundation.prototype.setPersistent = function (isPersistent) {\n        if (isPersistent) {\n            this.adapter_.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n        }\n    };\n    /**\n     * @param isValidation True to make the helper text act as an error validation message.\n     */\n    MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {\n        if (isValidation) {\n            this.adapter_.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        }\n    };\n    /**\n     * Makes the helper text visible to screen readers.\n     */\n    MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {\n        this.adapter_.removeAttr(strings.ARIA_HIDDEN);\n    };\n    /**\n     * Sets the validity of the helper text based on the select validity.\n     */\n    MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {\n        var helperTextIsPersistent = this.adapter_.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n        var helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        var validationMsgNeedsDisplay = helperTextIsValidationMsg && !selectIsValid;\n        if (validationMsgNeedsDisplay) {\n            this.adapter_.setAttr(strings.ROLE, 'alert');\n        }\n        else {\n            this.adapter_.removeAttr(strings.ROLE);\n        }\n        if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n            this.hide_();\n        }\n    };\n    /**\n     * Hides the help text from screen readers.\n     */\n    MDCSelectHelperTextFoundation.prototype.hide_ = function () {\n        this.adapter_.setAttr(strings.ARIA_HIDDEN, 'true');\n    };\n    return MDCSelectHelperTextFoundation;\n}(MDCFoundation));\nexport { MDCSelectHelperTextFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSelectHelperTextFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}