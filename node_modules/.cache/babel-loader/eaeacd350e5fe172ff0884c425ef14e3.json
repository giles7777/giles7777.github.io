{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Agent } from \"./Agent\";\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n      );\n      this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      const agent1 = new Agent(0, 0, 0);\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x156289,\n        emissive: 0x072534,\n        side: THREE.DoubleSide,\n        flatShading: true\n      });\n      this.cube = new THREE.Mesh(geometry, material);\n      this.scene.add(this.cube); //this.scene.add(agent1.getMesh());\n\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 200, 0);\n      lights[1].position.set(100, 200, 100);\n      lights[2].position.set(-100, -200, -100);\n      this.scene.add(lights[0]);\n      this.scene.add(lights[1]);\n      this.scene.add(lights[2]);\n    };\n\n    this.startAnimationLoop = () => {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera); // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  } // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: ref => this.el = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nclass Container extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isMounted: true\n    };\n  }\n\n  render() {\n    const {\n      isMounted = true\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setState(state => ({\n        isMounted: !state.isMounted\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, isMounted ? \"Unmount\" : \"Mount\"), isMounted && /*#__PURE__*/React.createElement(App, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 23\n      }\n    }), isMounted && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 23\n      }\n    }, \"Scroll to zoom, drag to rotate\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","THREE","OrbitControls","Agent","style","height","App","sceneSetup","width","el","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","addCustomSceneObjects","agent1","geometry","BoxGeometry","material","MeshPhongMaterial","color","emissive","side","DoubleSide","flatShading","cube","Mesh","add","lights","PointLight","set","startAnimationLoop","rotation","x","y","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref","Container","state","isMounted","setState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Agent } from \"./Agent\"\n\nconst style = {\n  height: 512 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n    );\n    this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n  };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    const agent1 = new Agent(0,0,0);\n\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x156289,\n      emissive: 0x072534,\n      side: THREE.DoubleSide,\n      flatShading: true\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n    //this.scene.add(agent1.getMesh());\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n  };\n\n  startAnimationLoop = () => {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n\n    this.renderer.render(this.scene, this.camera);\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\nclass Container extends React.Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true } = this.state;\n    return (\n      <>\n        <button\n          onClick={() =>\n            this.setState(state => ({ isMounted: !state.isMounted }))\n          }\n        >\n          {isMounted ? \"Unmount\" : \"Mount\"}\n        </button>\n        {isMounted && <App />}\n        {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}