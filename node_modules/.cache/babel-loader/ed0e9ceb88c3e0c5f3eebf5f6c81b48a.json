{"ast":null,"code":"/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */\nexport class Agent {\n  constructor(context, radio, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0) {\n    this.marked = false;\n    this.THREE = context;\n    this.radio = radio;\n    this.id = id;\n    this.size = size;\n    this.world = world;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.rotx = rotx;\n    this.roty = roty;\n    this.rotz = rotz;\n    this.state = {};\n    this.createMesh();\n    this.neighbors = []; // Validate to catch runtime bugs\n\n    if (typeof id === \"undefined\") {\n      throw \"Agent.id must be set\";\n    }\n  }\n\n  setMarked(val) {\n    this.marked = val;\n    this.group.remove(this.group, this.group.children);\n    this.group.add(this.mesh);\n    if (!this.marked) return;\n    let geometry = new this.THREE.SphereGeometry(this.size * 1.3, 24, 24, 0, Math.PI * 2, 0, Math.PI / 2);\n    let material = new this.THREE.MeshBasicMaterial({\n      color: 0xFF0000\n    });\n    let mesh = new this.THREE.Mesh(geometry, material);\n    mesh.position.copy(new this.THREE.Vector3(this.x, this.y, this.z - this.size));\n    mesh.rotation.x = this.rotx;\n    mesh.rotation.y = this.roty;\n    mesh.rotation.z = this.rotz;\n    this.group.add(mesh);\n  } // State should always be a single map for easier serialization\n\n\n  getState() {\n    return this.state;\n  }\n\n  getPosition() {\n    return new this.THREE.Vector3(this.x, this.y, this.z);\n  }\n\n  createMesh() {\n    this.geometry = new this.THREE.SphereGeometry(this.size, 24, 24, 0, Math.PI * 2, 0, Math.PI / 2);\n    this.material = new this.THREE.MeshBasicMaterial({\n      color: 0xFFFFFF\n    });\n    this.mesh = new this.THREE.Mesh(this.geometry, this.material);\n    this.mesh.position.copy(new this.THREE.Vector3(this.x, this.y, this.z));\n    this.mesh.rotation.x = this.rotx;\n    this.mesh.rotation.y = this.roty;\n    this.mesh.rotation.z = this.rotz;\n    this.group = new this.THREE.Group();\n    this.group.add(this.mesh);\n  } // Called only once.  You may modify it but cannot reallocate it.\n\n\n  getMesh() {\n    return this.group;\n  } // Simulation methods\n\n\n  loop() {}\n\n  setNeighbors(val) {\n    this.neighbors = [...val];\n  }\n\n  getNeighbors() {\n    return this.neighbors;\n  }\n\n  addNeighbor(id) {\n    this.neighbors.push(id);\n  }\n\n  removeNeighbor(id) {\n    let index = this.neighbors.indexOf(id);\n    if (index !== -1) this.neighbors.splice(index, 1);\n  }\n\n  receiveMessage(msg) {} // simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\n\n\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/Agent.js"],"names":["Agent","constructor","context","radio","id","world","size","x","y","z","rotx","roty","rotz","marked","THREE","state","createMesh","neighbors","setMarked","val","group","remove","children","add","mesh","geometry","SphereGeometry","Math","PI","material","MeshBasicMaterial","color","Mesh","position","copy","Vector3","rotation","getState","getPosition","Group","getMesh","loop","setNeighbors","getNeighbors","addNeighbor","push","removeNeighbor","index","indexOf","splice","receiveMessage","msg"],"mappings":"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","sourcesContent":["/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */\r\nexport class Agent {\r\n  marked = false;\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0) {\r\n    this.THREE = context;\r\n    this.radio = radio;\r\n    this.id = id;\r\n    this.size = size;\r\n    this.world = world;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    this.rotx = rotx;\r\n    this.roty = roty;\r\n    this.rotz = rotz;\r\n    this.state = {};\r\n\r\n    this.createMesh();\r\n    this.neighbors = [];\r\n\r\n    // Validate to catch runtime bugs\r\n    if (typeof id === \"undefined\") {\r\n      throw \"Agent.id must be set\";\r\n    }\r\n  }\r\n\r\n  setMarked(val) {\r\n    this.marked = val;\r\n\r\n    this.group.remove(this.group,this.group.children);\r\n    this.group.add(this.mesh);\r\n\r\n    if (!this.marked) return;\r\n\r\n    let geometry = new this.THREE.SphereGeometry(this.size*1.3, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    let material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFF0000,\r\n    });\r\n    let mesh = new this.THREE.Mesh(geometry, material);\r\n    mesh.position.copy(new this.THREE.Vector3(this.x,this.y,this.z-this.size));\r\n    mesh.rotation.x = this.rotx;\r\n    mesh.rotation.y = this.roty;\r\n    mesh.rotation.z = this.rotz;\r\n\r\n    this.group.add(mesh);\r\n  }\r\n\r\n  // State should always be a single map for easier serialization\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  getPosition() {\r\n    return new this.THREE.Vector3(this.x,this.y,this.z);\r\n  }\r\n\r\n  createMesh() {\r\n    this.geometry = new this.THREE.SphereGeometry(this.size, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    this.material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFFFFFF,\r\n    });\r\n    this.mesh = new this.THREE.Mesh(this.geometry, this.material);\r\n    this.mesh.position.copy(new this.THREE.Vector3(this.x,this.y,this.z));\r\n    this.mesh.rotation.x = this.rotx;\r\n    this.mesh.rotation.y = this.roty;\r\n    this.mesh.rotation.z = this.rotz;\r\n\r\n    this.group = new this.THREE.Group();\r\n    this.group.add(this.mesh);\r\n  }\r\n\r\n  // Called only once.  You may modify it but cannot reallocate it.\r\n  getMesh() {\r\n    return this.group;\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n\r\n  }\r\n\r\n  setNeighbors(val) {\r\n    this.neighbors = [...val];\r\n  }\r\n\r\n  getNeighbors() {\r\n    return this.neighbors;\r\n  }\r\n\r\n  addNeighbor(id) {\r\n    this.neighbors.push(id);\r\n  }\r\n\r\n  removeNeighbor(id) {\r\n    let index = this.neighbors.indexOf(id);\r\n    if (index !== -1) this.neighbors.splice(index,1);\r\n  }\r\n\r\n  receiveMessage(msg) {\r\n  }\r\n\r\n  // simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\r\n}\r\n"]},"metadata":{},"sourceType":"module"}