{"ast":null,"code":"/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */\nexport class Agent {\n  constructor(context, radio, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0) {\n    this.marked = false;\n    this.THREE = context;\n    this.radio = radio;\n    this.id = id;\n    this.size = size;\n    this.world = world;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.rotx = rotx;\n    this.roty = roty;\n    this.rotz = rotz;\n    this.state = {};\n    this.createMesh();\n    this.neighbors = []; // Validate to catch runtime bugs\n\n    if (typeof id === \"undefined\") {\n      throw \"Agent.id must be set\";\n    }\n  }\n\n  setMarked(val) {\n    console.log(\"Mark me: \" + this.id + \" val: \" + val);\n    this.marked = val;\n    console.log(\"group before: \" + this.group.children.length);\n\n    for (let i = this.group.children.length - 1; i >= 0; i--) {\n      this.group.remove(this.group.children[i]);\n    }\n\n    console.log(\"group after: \" + this.group.children.length);\n    this.group.add(this.mesh);\n    if (!this.marked) return;\n    let geometry = new this.THREE.SphereGeometry(this.size * 1.3, 24, 24, 0, Math.PI * 2, 0, Math.PI / 2);\n    let material = new this.THREE.MeshBasicMaterial({\n      color: 0xFF0000\n    });\n    let marker = new this.THREE.Mesh(geometry, material);\n    marker.position.copy(new this.THREE.Vector3(this.x, this.y, this.z - this.size));\n    marker.rotation.x = this.rotx;\n    marker.rotation.y = this.roty;\n    marker.rotation.z = this.rotz;\n    this.group.add(marker);\n  }\n\n  getMarked() {\n    return this.marked;\n  } // State should always be a single map for easier serialization\n\n\n  getState() {\n    return this.state;\n  }\n\n  getPosition() {\n    return new this.THREE.Vector3(this.x, this.y, this.z);\n  }\n\n  createMesh() {\n    this.geometry = new this.THREE.SphereGeometry(this.size, 24, 24, 0, Math.PI * 2, 0, Math.PI / 2);\n    this.material = new this.THREE.MeshBasicMaterial({\n      color: 0xFFFFFF\n    });\n    this.mesh = new this.THREE.Mesh(this.geometry, this.material);\n    this.mesh.position.copy(new this.THREE.Vector3(this.x, this.y, this.z));\n    this.mesh.rotation.x = this.rotx;\n    this.mesh.rotation.y = this.roty;\n    this.mesh.rotation.z = this.rotz;\n    this.group = new this.THREE.Group();\n    this.group.add(this.mesh);\n  } // Called only once.  You may modify it but cannot reallocate it.\n\n\n  getMesh() {\n    return this.group;\n  } // Simulation methods\n\n\n  loop() {}\n\n  setNeighbors(val) {\n    this.neighbors = [...val];\n  }\n\n  getNeighbors() {\n    return this.neighbors;\n  }\n\n  addNeighbor(id) {\n    this.neighbors.push(id);\n  }\n\n  removeNeighbor(id) {\n    let index = this.neighbors.indexOf(id);\n    if (index !== -1) this.neighbors.splice(index, 1);\n  }\n\n  receiveMessage(msg) {} // simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\n\n\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/Agent.js"],"names":["Agent","constructor","context","radio","id","world","size","x","y","z","rotx","roty","rotz","marked","THREE","state","createMesh","neighbors","setMarked","val","console","log","group","children","length","i","remove","add","mesh","geometry","SphereGeometry","Math","PI","material","MeshBasicMaterial","color","marker","Mesh","position","copy","Vector3","rotation","getMarked","getState","getPosition","Group","getMesh","loop","setNeighbors","getNeighbors","addNeighbor","push","removeNeighbor","index","indexOf","splice","receiveMessage","msg"],"mappings":"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","sourcesContent":["/*\r\n Agent class.  An agent is a separate individual that communicates via messages to other agents.\r\n\r\n It contains a 3D representation implemented via three.js classes\r\n It contains a 2D parameter setup representation implemented via React components\r\n */\r\nexport class Agent {\r\n  marked = false;\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0) {\r\n    this.THREE = context;\r\n    this.radio = radio;\r\n    this.id = id;\r\n    this.size = size;\r\n    this.world = world;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    this.rotx = rotx;\r\n    this.roty = roty;\r\n    this.rotz = rotz;\r\n    this.state = {};\r\n\r\n    this.createMesh();\r\n    this.neighbors = [];\r\n\r\n    // Validate to catch runtime bugs\r\n    if (typeof id === \"undefined\") {\r\n      throw \"Agent.id must be set\";\r\n    }\r\n  }\r\n\r\n  setMarked(val) {\r\n    console.log(\"Mark me: \" + this.id + \" val: \" + val);\r\n    this.marked = val;\r\n\r\n    console.log(\"group before: \" + this.group.children.length);\r\n    for (let i = this.group.children.length - 1; i >= 0; i--) {\r\n      this.group.remove(this.group.children[i]);\r\n    }\r\n    console.log(\"group after: \" + this.group.children.length);\r\n    this.group.add(this.mesh);\r\n\r\n    if (!this.marked) return;\r\n\r\n    let geometry = new this.THREE.SphereGeometry(this.size*1.3, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    let material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFF0000,\r\n    });\r\n    let marker = new this.THREE.Mesh(geometry, material);\r\n    marker.position.copy(new this.THREE.Vector3(this.x,this.y,this.z-this.size));\r\n    marker.rotation.x = this.rotx;\r\n    marker.rotation.y = this.roty;\r\n    marker.rotation.z = this.rotz;\r\n\r\n    this.group.add(marker);\r\n  }\r\n\r\n  getMarked() {\r\n    return this.marked;\r\n  }\r\n\r\n  // State should always be a single map for easier serialization\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  getPosition() {\r\n    return new this.THREE.Vector3(this.x,this.y,this.z);\r\n  }\r\n\r\n  createMesh() {\r\n    this.geometry = new this.THREE.SphereGeometry(this.size, 24, 24,0,Math.PI*2,0,Math.PI/2);\r\n    this.material = new this.THREE.MeshBasicMaterial({\r\n      color: 0xFFFFFF,\r\n    });\r\n    this.mesh = new this.THREE.Mesh(this.geometry, this.material);\r\n    this.mesh.position.copy(new this.THREE.Vector3(this.x,this.y,this.z));\r\n    this.mesh.rotation.x = this.rotx;\r\n    this.mesh.rotation.y = this.roty;\r\n    this.mesh.rotation.z = this.rotz;\r\n\r\n    this.group = new this.THREE.Group();\r\n    this.group.add(this.mesh);\r\n  }\r\n\r\n  // Called only once.  You may modify it but cannot reallocate it.\r\n  getMesh() {\r\n    return this.group;\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n\r\n  }\r\n\r\n  setNeighbors(val) {\r\n    this.neighbors = [...val];\r\n  }\r\n\r\n  getNeighbors() {\r\n    return this.neighbors;\r\n  }\r\n\r\n  addNeighbor(id) {\r\n    this.neighbors.push(id);\r\n  }\r\n\r\n  removeNeighbor(id) {\r\n    let index = this.neighbors.indexOf(id);\r\n    if (index !== -1) this.neighbors.splice(index,1);\r\n  }\r\n\r\n  receiveMessage(msg) {\r\n  }\r\n\r\n  // simulator.sendMessage(id,msg) - Sends a message to another Agent.  Has a variable delay\r\n}\r\n"]},"metadata":{},"sourceType":"module"}