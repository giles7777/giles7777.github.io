{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCSelectFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSelectFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCSelectFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, tslib_1.__assign({}, MDCSelectFoundation.defaultAdapter, adapter)) || this; // Index of the currently selected menu item.\n\n\n    _this.selectedIndex_ = numbers.UNSET_INDEX; // Disabled state\n\n    _this.disabled_ = false; // isMenuOpen_ is used to track the state of the menu by listening to the MDCMenuSurface:closed event\n    // For reference, menu.open will return false if the menu is still closing, but isMenuOpen_ returns false only after\n    // the menu has closed\n\n    _this.isMenuOpen_ = false;\n    _this.leadingIcon_ = foundationMap.leadingIcon;\n    _this.helperText_ = foundationMap.helperText;\n    _this.menuItemValues_ = _this.adapter_.getMenuItemValues();\n    return _this;\n  }\n\n  Object.defineProperty(MDCSelectFoundation, \"cssClasses\", {\n    get: function get() {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"numbers\", {\n    get: function get() {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"strings\", {\n    get: function get() {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n     */\n    get: function get() {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function addClass() {\n          return undefined;\n        },\n        removeClass: function removeClass() {\n          return undefined;\n        },\n        hasClass: function hasClass() {\n          return false;\n        },\n        activateBottomLine: function activateBottomLine() {\n          return undefined;\n        },\n        deactivateBottomLine: function deactivateBottomLine() {\n          return undefined;\n        },\n        getSelectedMenuItem: function getSelectedMenuItem() {\n          return null;\n        },\n        hasLabel: function hasLabel() {\n          return false;\n        },\n        floatLabel: function floatLabel() {\n          return undefined;\n        },\n        getLabelWidth: function getLabelWidth() {\n          return 0;\n        },\n        hasOutline: function hasOutline() {\n          return false;\n        },\n        notchOutline: function notchOutline() {\n          return undefined;\n        },\n        closeOutline: function closeOutline() {\n          return undefined;\n        },\n        setRippleCenter: function setRippleCenter() {\n          return undefined;\n        },\n        notifyChange: function notifyChange() {\n          return undefined;\n        },\n        setSelectedText: function setSelectedText() {\n          return undefined;\n        },\n        isSelectedTextFocused: function isSelectedTextFocused() {\n          return false;\n        },\n        getSelectedTextAttr: function getSelectedTextAttr() {\n          return '';\n        },\n        setSelectedTextAttr: function setSelectedTextAttr() {\n          return undefined;\n        },\n        openMenu: function openMenu() {\n          return undefined;\n        },\n        closeMenu: function closeMenu() {\n          return undefined;\n        },\n        getAnchorElement: function getAnchorElement() {\n          return null;\n        },\n        setMenuAnchorElement: function setMenuAnchorElement() {\n          return undefined;\n        },\n        setMenuAnchorCorner: function setMenuAnchorCorner() {\n          return undefined;\n        },\n        setMenuWrapFocus: function setMenuWrapFocus() {\n          return undefined;\n        },\n        setAttributeAtIndex: function setAttributeAtIndex() {\n          return undefined;\n        },\n        removeAttributeAtIndex: function removeAttributeAtIndex() {\n          return undefined;\n        },\n        focusMenuItemAtIndex: function focusMenuItemAtIndex() {\n          return undefined;\n        },\n        getMenuItemCount: function getMenuItemCount() {\n          return 0;\n        },\n        getMenuItemValues: function getMenuItemValues() {\n          return [];\n        },\n        getMenuItemTextAtIndex: function getMenuItemTextAtIndex() {\n          return '';\n        },\n        getMenuItemAttr: function getMenuItemAttr() {\n          return '';\n        },\n        addClassAtIndex: function addClassAtIndex() {\n          return undefined;\n        },\n        removeClassAtIndex: function removeClassAtIndex() {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Returns the index of the currently selected menu item, or -1 if none. */\n\n  MDCSelectFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex_;\n  };\n\n  MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu) {\n    if (closeMenu === void 0) {\n      closeMenu = false;\n    }\n\n    if (index >= this.adapter_.getMenuItemCount()) {\n      return;\n    }\n\n    var previouslySelectedIndex = this.selectedIndex_;\n    this.selectedIndex_ = index;\n\n    if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n      this.adapter_.setSelectedText('');\n    } else {\n      this.adapter_.setSelectedText(this.adapter_.getMenuItemTextAtIndex(this.selectedIndex_).trim());\n    }\n\n    if (previouslySelectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter_.removeClassAtIndex(previouslySelectedIndex, cssClasses.SELECTED_ITEM_CLASS);\n      this.adapter_.removeAttributeAtIndex(previouslySelectedIndex, strings.ARIA_SELECTED_ATTR);\n    }\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter_.addClassAtIndex(this.selectedIndex_, cssClasses.SELECTED_ITEM_CLASS);\n      this.adapter_.setAttributeAtIndex(this.selectedIndex_, strings.ARIA_SELECTED_ATTR, 'true');\n    }\n\n    this.layout();\n\n    if (closeMenu) {\n      this.adapter_.closeMenu();\n    }\n\n    this.handleChange();\n  };\n\n  MDCSelectFoundation.prototype.setValue = function (value) {\n    var index = this.menuItemValues_.indexOf(value);\n    this.setSelectedIndex(index);\n    this.handleChange();\n  };\n\n  MDCSelectFoundation.prototype.getValue = function () {\n    var listItem = this.adapter_.getSelectedMenuItem();\n\n    if (listItem) {\n      return this.adapter_.getMenuItemAttr(listItem, strings.VALUE_ATTR) || '';\n    }\n\n    return '';\n  };\n\n  MDCSelectFoundation.prototype.getDisabled = function () {\n    return this.disabled_;\n  };\n\n  MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {\n    this.disabled_ = isDisabled;\n\n    if (this.disabled_) {\n      this.adapter_.addClass(cssClasses.DISABLED);\n      this.adapter_.closeMenu();\n    } else {\n      this.adapter_.removeClass(cssClasses.DISABLED);\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setDisabled(this.disabled_);\n    }\n\n    this.adapter_.setSelectedTextAttr('tabindex', this.disabled_ ? '-1' : '0');\n    this.adapter_.setSelectedTextAttr('aria-disabled', this.disabled_.toString());\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCSelectFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  };\n\n  MDCSelectFoundation.prototype.layout = function () {\n    if (this.adapter_.hasLabel()) {\n      var openNotch = this.getValue().length > 0;\n      this.notchOutline(openNotch);\n    }\n  };\n\n  MDCSelectFoundation.prototype.handleMenuOpened = function () {\n    if (this.adapter_.getMenuItemValues().length === 0) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.ACTIVATED); // Menu should open to the last selected element, should open to first menu item otherwise.\n\n    var focusItemIndex = this.selectedIndex_ >= 0 ? this.selectedIndex_ : 0;\n    this.adapter_.focusMenuItemAtIndex(focusItemIndex);\n  };\n\n  MDCSelectFoundation.prototype.handleMenuClosed = function () {\n    this.adapter_.removeClass(cssClasses.ACTIVATED);\n    this.isMenuOpen_ = false;\n    this.adapter_.setSelectedTextAttr('aria-expanded', 'false'); // Unfocus the select if menu is closed without a selection\n\n    if (!this.adapter_.isSelectedTextFocused()) {\n      this.blur_();\n    }\n  };\n  /**\n   * Handles value changes, via change event or programmatic updates.\n   */\n\n\n  MDCSelectFoundation.prototype.handleChange = function () {\n    this.updateLabel_();\n    this.adapter_.notifyChange(this.getValue());\n    var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired) {\n      this.setValid(this.isValid());\n\n      if (this.helperText_) {\n        this.helperText_.setValidity(this.isValid());\n      }\n    }\n  };\n\n  MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {\n    this.setSelectedIndex(index,\n    /** closeMenu */\n    true);\n  };\n  /**\n   * Handles focus events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleFocus = function () {\n    this.adapter_.addClass(cssClasses.FOCUSED);\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(true);\n      this.adapter_.floatLabel(true);\n    }\n\n    this.adapter_.activateBottomLine();\n\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  };\n  /**\n   * Handles blur events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleBlur = function () {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    this.blur_();\n  };\n\n  MDCSelectFoundation.prototype.handleClick = function (normalizedX) {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    this.adapter_.setRippleCenter(normalizedX);\n    this.adapter_.openMenu();\n    this.isMenuOpen_ = true;\n    this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n  };\n\n  MDCSelectFoundation.prototype.handleKeydown = function (event) {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    var isEnter = event.key === 'Enter' || event.keyCode === 13;\n    var isSpace = event.key === 'Space' || event.keyCode === 32;\n    var arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n    var arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n    if (this.adapter_.hasClass(cssClasses.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {\n      this.adapter_.openMenu();\n      this.isMenuOpen_ = true;\n      this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n      event.preventDefault();\n    }\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCSelectFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter_.hasOutline()) {\n      return;\n    }\n\n    var isFocused = this.adapter_.hasClass(cssClasses.FOCUSED);\n\n    if (openNotch) {\n      var labelScale = numbers.LABEL_SCALE;\n      var labelWidth = this.adapter_.getLabelWidth() * labelScale;\n      this.adapter_.notchOutline(labelWidth);\n    } else if (!isFocused) {\n      this.adapter_.closeOutline();\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setContent(content);\n    }\n  };\n\n  MDCSelectFoundation.prototype.setValid = function (isValid) {\n    this.adapter_.setSelectedTextAttr('aria-invalid', (!isValid).toString());\n\n    if (isValid) {\n      this.adapter_.removeClass(cssClasses.INVALID);\n    } else {\n      this.adapter_.addClass(cssClasses.INVALID);\n    }\n  };\n\n  MDCSelectFoundation.prototype.isValid = function () {\n    if (this.adapter_.hasClass(cssClasses.REQUIRED) && !this.adapter_.hasClass(cssClasses.DISABLED)) {\n      // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n      // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n      return this.selectedIndex_ !== numbers.UNSET_INDEX && (this.selectedIndex_ !== 0 || Boolean(this.getValue()));\n    }\n\n    return true;\n  };\n\n  MDCSelectFoundation.prototype.setRequired = function (isRequired) {\n    if (isRequired) {\n      this.adapter_.addClass(cssClasses.REQUIRED);\n    } else {\n      this.adapter_.removeClass(cssClasses.REQUIRED);\n    }\n\n    this.adapter_.setSelectedTextAttr('aria-required', isRequired.toString());\n  };\n\n  MDCSelectFoundation.prototype.getRequired = function () {\n    return this.adapter_.getSelectedTextAttr('aria-required') === 'true';\n  };\n\n  MDCSelectFoundation.prototype.init = function () {\n    var anchorEl = this.adapter_.getAnchorElement();\n\n    if (anchorEl) {\n      this.adapter_.setMenuAnchorElement(anchorEl);\n      this.adapter_.setMenuAnchorCorner(Corner.BOTTOM_START);\n    }\n\n    this.adapter_.setMenuWrapFocus(false);\n    var value = this.getValue();\n\n    if (value) {\n      this.setValue(value);\n    } // Initially sync floating label\n\n\n    this.updateLabel_();\n  };\n  /**\n   * Notches the outline and floats the label when appropriate.\n   */\n\n\n  MDCSelectFoundation.prototype.updateLabel_ = function () {\n    var value = this.getValue();\n    var optionHasValue = value.length > 0;\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(optionHasValue);\n\n      if (!this.adapter_.hasClass(cssClasses.FOCUSED)) {\n        this.adapter_.floatLabel(optionHasValue);\n      }\n    }\n  };\n  /**\n   * Unfocuses the select component.\n   */\n\n\n  MDCSelectFoundation.prototype.blur_ = function () {\n    this.adapter_.removeClass(cssClasses.FOCUSED);\n    this.updateLabel_();\n    this.adapter_.deactivateBottomLine();\n    var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired) {\n      this.setValid(this.isValid());\n\n      if (this.helperText_) {\n        this.helperText_.setValidity(this.isValid());\n      }\n    }\n  };\n\n  return MDCSelectFoundation;\n}(MDCFoundation);\n\nexport { MDCSelectFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSelectFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQ,aAAR,QAA4B,2BAA5B;AACA,SAAQ,MAAR,QAAqB,kCAArB;AAGA,SAAQ,UAAR,EAAoB,OAApB,EAA6B,OAA7B,QAA2C,aAA3C;;AAKA,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,EAAA,MAAA;AAsEvC;;AACA;;;;;;AAIA,WAAA,mBAAA,CAAY,OAAZ,EAAiD,aAAjD,EAAoG;AAAnD,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,EAAA;AAAmD;;AAApG,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAU,mBAAmB,CAAC,cAA9B,EAAiD,OAAjD,CAAA,KAA0D,IAD5D,CAAoG,CAhBpG;;;AACQ,IAAA,KAAA,CAAA,cAAA,GAAyB,OAAO,CAAC,WAAjC,CAe4F,CAZpG;;AACQ,IAAA,KAAA,CAAA,SAAA,GAAY,KAAZ,CAW4F,CAVpG;AACA;AACA;;AACQ,IAAA,KAAA,CAAA,WAAA,GAAc,KAAd;AAUN,IAAA,KAAI,CAAC,YAAL,GAAoB,aAAa,CAAC,WAAlC;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,aAAa,CAAC,UAAjC;AAEA,IAAA,KAAI,CAAC,eAAL,GAAuB,KAAI,CAAC,QAAL,CAAc,iBAAd,EAAvB;;AACD;;AAjFD,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAX,EAAW,YAAX,EAAqB;SAArB,eAAA;AACE,aAAO,UAAP;AACD,KAFoB;oBAAA;;AAAA,GAArB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAX,EAAW,SAAX,EAAkB;SAAlB,eAAA;AACE,aAAO,OAAP;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAX,EAAW,SAAX,EAAkB;SAAlB,eAAA;AACE,aAAO,OAAP;AACD,KAFiB;oBAAA;;AAAA,GAAlB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,eAAA;AACE;AACA,aAAO;AACL,QAAA,QAAQ,EAAE,oBAAA;AAAM,iBAAA,SAAA;AAAS,SADpB;AAEL,QAAA,WAAW,EAAE,uBAAA;AAAM,iBAAA,SAAA;AAAS,SAFvB;AAGL,QAAA,QAAQ,EAAE,oBAAA;AAAM,iBAAA,KAAA;AAAK,SAHhB;AAIL,QAAA,kBAAkB,EAAE,8BAAA;AAAM,iBAAA,SAAA;AAAS,SAJ9B;AAKL,QAAA,oBAAoB,EAAE,gCAAA;AAAM,iBAAA,SAAA;AAAS,SALhC;AAML,QAAA,mBAAmB,EAAE,+BAAA;AAAM,iBAAA,IAAA;AAAI,SAN1B;AAOL,QAAA,QAAQ,EAAE,oBAAA;AAAM,iBAAA,KAAA;AAAK,SAPhB;AAQL,QAAA,UAAU,EAAE,sBAAA;AAAM,iBAAA,SAAA;AAAS,SARtB;AASL,QAAA,aAAa,EAAE,yBAAA;AAAM,iBAAA,CAAA;AAAC,SATjB;AAUL,QAAA,UAAU,EAAE,sBAAA;AAAM,iBAAA,KAAA;AAAK,SAVlB;AAWL,QAAA,YAAY,EAAE,wBAAA;AAAM,iBAAA,SAAA;AAAS,SAXxB;AAYL,QAAA,YAAY,EAAE,wBAAA;AAAM,iBAAA,SAAA;AAAS,SAZxB;AAaL,QAAA,eAAe,EAAE,2BAAA;AAAM,iBAAA,SAAA;AAAS,SAb3B;AAcL,QAAA,YAAY,EAAE,wBAAA;AAAM,iBAAA,SAAA;AAAS,SAdxB;AAeL,QAAA,eAAe,EAAE,2BAAA;AAAM,iBAAA,SAAA;AAAS,SAf3B;AAgBL,QAAA,qBAAqB,EAAE,iCAAA;AAAM,iBAAA,KAAA;AAAK,SAhB7B;AAiBL,QAAA,mBAAmB,EAAE,+BAAA;AAAM,iBAAA,EAAA;AAAE,SAjBxB;AAkBL,QAAA,mBAAmB,EAAE,+BAAA;AAAM,iBAAA,SAAA;AAAS,SAlB/B;AAmBL,QAAA,QAAQ,EAAE,oBAAA;AAAM,iBAAA,SAAA;AAAS,SAnBpB;AAoBL,QAAA,SAAS,EAAE,qBAAA;AAAM,iBAAA,SAAA;AAAS,SApBrB;AAqBL,QAAA,gBAAgB,EAAE,4BAAA;AAAM,iBAAA,IAAA;AAAI,SArBvB;AAsBL,QAAA,oBAAoB,EAAE,gCAAA;AAAM,iBAAA,SAAA;AAAS,SAtBhC;AAuBL,QAAA,mBAAmB,EAAE,+BAAA;AAAM,iBAAA,SAAA;AAAS,SAvB/B;AAwBL,QAAA,gBAAgB,EAAE,4BAAA;AAAM,iBAAA,SAAA;AAAS,SAxB5B;AAyBL,QAAA,mBAAmB,EAAE,+BAAA;AAAM,iBAAA,SAAA;AAAS,SAzB/B;AA0BL,QAAA,sBAAsB,EAAE,kCAAA;AAAM,iBAAA,SAAA;AAAS,SA1BlC;AA2BL,QAAA,oBAAoB,EAAE,gCAAA;AAAM,iBAAA,SAAA;AAAS,SA3BhC;AA4BL,QAAA,gBAAgB,EAAE,4BAAA;AAAM,iBAAA,CAAA;AAAC,SA5BpB;AA6BL,QAAA,iBAAiB,EAAE,6BAAA;AAAM,iBAAA,EAAA;AAAE,SA7BtB;AA8BL,QAAA,sBAAsB,EAAE,kCAAA;AAAM,iBAAA,EAAA;AAAE,SA9B3B;AA+BL,QAAA,eAAe,EAAE,2BAAA;AAAM,iBAAA,EAAA;AAAE,SA/BpB;AAgCL,QAAA,eAAe,EAAE,2BAAA;AAAM,iBAAA,SAAA;AAAS,SAhC3B;AAiCL,QAAA,kBAAkB,EAAE,8BAAA;AAAM,iBAAA,SAAA;AAAS;AAjC9B,OAAP,CAFF,CAqCE;AACD,KAtCwB;oBAAA;;AAAA,GAAzB;AAoEA;;AACA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACE,WAAO,KAAK,cAAZ;AACD,GAFD;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,KAAjB,EAAgC,SAAhC,EAAiD;AAAjB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,KAAA;AAAiB;;AAC/C,QAAI,KAAK,IAAI,KAAK,QAAL,CAAc,gBAAd,EAAb,EAA+C;AAC7C;AACD;;AAED,QAAM,uBAAuB,GAAG,KAAK,cAArC;AACA,SAAK,cAAL,GAAsB,KAAtB;;AAEA,QAAI,KAAK,cAAL,KAAwB,OAAO,CAAC,WAApC,EAAiD;AAC/C,WAAK,QAAL,CAAc,eAAd,CAA8B,EAA9B;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,eAAd,CAA8B,KAAK,QAAL,CAAc,sBAAd,CAAqC,KAAK,cAA1C,EAA2D,IAA3D,EAA9B;AACD;;AAED,QAAI,uBAAuB,KAAK,OAAO,CAAC,WAAxC,EAAqD;AACnD,WAAK,QAAL,CAAc,kBAAd,CAAiC,uBAAjC,EAA0D,UAAU,CAAC,mBAArE;AACA,WAAK,QAAL,CAAc,sBAAd,CAAqC,uBAArC,EAA8D,OAAO,CAAC,kBAAtE;AACD;;AACD,QAAI,KAAK,cAAL,KAAwB,OAAO,CAAC,WAApC,EAAiD;AAC/C,WAAK,QAAL,CAAc,eAAd,CAA8B,KAAK,cAAnC,EAAmD,UAAU,CAAC,mBAA9D;AACA,WAAK,QAAL,CAAc,mBAAd,CAAkC,KAAK,cAAvC,EAAuD,OAAO,CAAC,kBAA/D,EAAmF,MAAnF;AACD;;AACD,SAAK,MAAL;;AAEA,QAAI,SAAJ,EAAe;AACb,WAAK,QAAL,CAAc,SAAd;AACD;;AAED,SAAK,YAAL;AACD,GA7BD;;AA+BA,EAAA,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAsB;AACpB,QAAM,KAAK,GAAG,KAAK,eAAL,CAAqB,OAArB,CAA6B,KAA7B,CAAd;AACA,SAAK,gBAAL,CAAsB,KAAtB;AACA,SAAK,YAAL;AACD,GAJD;;AAMA,EAAA,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,mBAAd,EAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ,aAAO,KAAK,QAAL,CAAc,eAAd,CAA8B,QAA9B,EAAwC,OAAO,CAAC,UAAhD,KAA+D,EAAtE;AACD;;AACD,WAAO,EAAP;AACD,GAND;;AAQA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAZ;AACD,GAFD;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,UAAZ,EAA+B;AAC7B,SAAK,SAAL,GAAiB,UAAjB;;AACA,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC;AACA,WAAK,QAAL,CAAc,SAAd;AACD,KAHD,MAGO;AACL,WAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,QAArC;AACD;;AAED,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,YAAL,CAAkB,WAAlB,CAA8B,KAAK,SAAnC;AACD;;AAED,SAAK,QAAL,CAAc,mBAAd,CAAkC,UAAlC,EAA8C,KAAK,SAAL,GAAiB,IAAjB,GAAwB,GAAtE;AACA,SAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,EAAmD,KAAK,SAAL,CAAe,QAAf,EAAnD;AACD,GAfD;AAiBA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,OAArB,EAAoC;AAClC,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,WAAL,CAAiB,UAAjB,CAA4B,OAA5B;AACD;AACF,GAJD;;AAMA,EAAA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAI,KAAK,QAAL,CAAc,QAAd,EAAJ,EAA8B;AAC5B,UAAM,SAAS,GAAG,KAAK,QAAL,GAAgB,MAAhB,GAAyB,CAA3C;AACA,WAAK,YAAL,CAAkB,SAAlB;AACD;AACF,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACE,QAAI,KAAK,QAAL,CAAc,iBAAd,GAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAClD;AACD;;AAED,SAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,SAAlC,EALF,CAOE;;AACA,QAAM,cAAc,GAAG,KAAK,cAAL,IAAuB,CAAvB,GAA2B,KAAK,cAAhC,GAAiD,CAAxE;AACA,SAAK,QAAL,CAAc,oBAAd,CAAmC,cAAnC;AACD,GAVD;;AAYA,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,SAArC;AACA,SAAK,WAAL,GAAmB,KAAnB;AACA,SAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,EAAmD,OAAnD,EAHF,CAKE;;AACA,QAAI,CAAC,KAAK,QAAL,CAAc,qBAAd,EAAL,EAA4C;AAC1C,WAAK,KAAL;AACD;AACF,GATD;AAWA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,SAAK,YAAL;AACA,SAAK,QAAL,CAAc,YAAd,CAA2B,KAAK,QAAL,EAA3B;AAEA,QAAM,UAAU,GAAG,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC,CAAnB;;AACA,QAAI,UAAJ,EAAgB;AACd,WAAK,QAAL,CAAc,KAAK,OAAL,EAAd;;AACA,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL,CAAiB,WAAjB,CAA6B,KAAK,OAAL,EAA7B;AACD;AACF;AACF,GAXD;;AAaA,EAAA,mBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,KAArB,EAAkC;AAChC,SAAK,gBAAL,CAAsB,KAAtB;AAA6B;AAAiB,QAA9C;AACD,GAFD;AAIA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC;;AAEA,QAAI,KAAK,QAAL,CAAc,QAAd,EAAJ,EAA8B;AAC5B,WAAK,YAAL,CAAkB,IAAlB;AACA,WAAK,QAAL,CAAc,UAAd,CAAyB,IAAzB;AACD;;AAED,SAAK,QAAL,CAAc,kBAAd;;AACA,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,WAAL,CAAiB,kBAAjB;AACD;AACF,GAZD;AAcA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,QAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AACD,SAAK,KAAL;AACD,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,WAAZ,EAA+B;AAC7B,QAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AACD,SAAK,QAAL,CAAc,eAAd,CAA8B,WAA9B;AAEA,SAAK,QAAL,CAAc,QAAd;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,EAAmD,MAAnD;AACD,GATD;;AAWA,EAAA,mBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAAkC;AAChC,QAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AAED,QAAM,OAAO,GAAG,KAAK,CAAC,GAAN,KAAc,OAAd,IAAyB,KAAK,CAAC,OAAN,KAAkB,EAA3D;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,GAAN,KAAc,OAAd,IAAyB,KAAK,CAAC,OAAN,KAAkB,EAA3D;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,GAAN,KAAc,SAAd,IAA2B,KAAK,CAAC,OAAN,KAAkB,EAA7D;AACA,QAAM,SAAS,GAAG,KAAK,CAAC,GAAN,KAAc,WAAd,IAA6B,KAAK,CAAC,OAAN,KAAkB,EAAjE;;AAEA,QAAI,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,MAA+C,OAAO,IAAI,OAAX,IAAsB,OAAtB,IAAiC,SAAhF,CAAJ,EAAgG;AAC9F,WAAK,QAAL,CAAc,QAAd;AACA,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,EAAmD,MAAnD;AACA,MAAA,KAAK,CAAC,cAAN;AACD;AACF,GAhBD;AAkBA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,SAAb,EAA+B;AAC7B,QAAI,CAAC,KAAK,QAAL,CAAc,UAAd,EAAL,EAAiC;AAC/B;AACD;;AACD,QAAM,SAAS,GAAG,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,CAAlB;;AAEA,QAAI,SAAJ,EAAe;AACb,UAAM,UAAU,GAAG,OAAO,CAAC,WAA3B;AACA,UAAM,UAAU,GAAG,KAAK,QAAL,CAAc,aAAd,KAAgC,UAAnD;AACA,WAAK,QAAL,CAAc,YAAd,CAA2B,UAA3B;AACD,KAJD,MAIO,IAAI,CAAC,SAAL,EAAgB;AACrB,WAAK,QAAL,CAAc,YAAd;AACD;AACF,GAbD;AAeA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,UAAwB,KAAxB,EAAqC;AACnC,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,YAAL,CAAkB,YAAlB,CAA+B,KAA/B;AACD;AACF,GAJD;AAMA;;;;;AAGA,EAAA,mBAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,OAAtB,EAAqC;AACnC,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,YAAL,CAAkB,UAAlB,CAA6B,OAA7B;AACD;AACF,GAJD;;AAMA,EAAA,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,OAAT,EAAyB;AACvB,SAAK,QAAL,CAAc,mBAAd,CAAkC,cAAlC,EAAkD,CAAC,CAAC,OAAF,EAAW,QAAX,EAAlD;;AACA,QAAI,OAAJ,EAAa;AACX,WAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,OAArC;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC;AACD;AACF,GAPD;;AASA,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,QAAI,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC,KAA+C,CAAC,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC,CAApD,EAAiG;AAC/F;AACA;AACA,aAAO,KAAK,cAAL,KAAwB,OAAO,CAAC,WAAhC,KACJ,KAAK,cAAL,KAAwB,CAAxB,IAA6B,OAAO,CAAC,KAAK,QAAL,EAAD,CADhC,CAAP;AAED;;AACD,WAAO,IAAP;AACD,GARD;;AAUA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,UAAZ,EAA+B;AAC7B,QAAI,UAAJ,EAAgB;AACd,WAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,QAArC;AACD;;AACD,SAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,EAAmD,UAAU,CAAC,QAAX,EAAnD;AACD,GAPD;;AASA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,mBAAd,CAAkC,eAAlC,MAAuD,MAA9D;AACD,GAFD;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,gBAAd,EAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ,WAAK,QAAL,CAAc,oBAAd,CAAmC,QAAnC;AACA,WAAK,QAAL,CAAc,mBAAd,CAAkC,MAAM,CAAC,YAAzC;AACD;;AACD,SAAK,QAAL,CAAc,gBAAd,CAA+B,KAA/B;AAEA,QAAM,KAAK,GAAG,KAAK,QAAL,EAAd;;AACA,QAAI,KAAJ,EAAW;AACT,WAAK,QAAL,CAAc,KAAd;AACD,KAXH,CAaE;;;AACA,SAAK,YAAL;AACD,GAfD;AAiBA;;;;;AAGQ,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,QAAL,EAAd;AACA,QAAM,cAAc,GAAG,KAAK,CAAC,MAAN,GAAe,CAAtC;;AAEA,QAAI,KAAK,QAAL,CAAc,QAAd,EAAJ,EAA8B;AAC5B,WAAK,YAAL,CAAkB,cAAlB;;AAEA,UAAI,CAAC,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,OAAlC,CAAL,EAAiD;AAC/C,aAAK,QAAL,CAAc,UAAd,CAAyB,cAAzB;AACD;AACF;AACF,GAXO;AAaR;;;;;AAGQ,EAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAR,YAAA;AACE,SAAK,QAAL,CAAc,WAAd,CAA0B,UAAU,CAAC,OAArC;AACA,SAAK,YAAL;AACA,SAAK,QAAL,CAAc,oBAAd;AAEA,QAAM,UAAU,GAAG,KAAK,QAAL,CAAc,QAAd,CAAuB,UAAU,CAAC,QAAlC,CAAnB;;AACA,QAAI,UAAJ,EAAgB;AACd,WAAK,QAAL,CAAc,KAAK,OAAL,EAAd;;AACA,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL,CAAiB,WAAjB,CAA6B,KAAK,OAAL,EAA7B;AACD;AACF;AACF,GAZO;;AAaV,SAAA,mBAAA;AAAC,CAnYD,CAAyC,aAAzC,CAAA;;gCAqYA;;AACA,eAAe,mBAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from './constants';\nvar MDCSelectFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCSelectFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    /**\n     * @param adapter\n     * @param foundationMap Map from subcomponent names to their subfoundations.\n     */\n    function MDCSelectFoundation(adapter, foundationMap) {\n        if (foundationMap === void 0) { foundationMap = {}; }\n        var _this = _super.call(this, tslib_1.__assign({}, MDCSelectFoundation.defaultAdapter, adapter)) || this;\n        // Index of the currently selected menu item.\n        _this.selectedIndex_ = numbers.UNSET_INDEX;\n        // Disabled state\n        _this.disabled_ = false;\n        // isMenuOpen_ is used to track the state of the menu by listening to the MDCMenuSurface:closed event\n        // For reference, menu.open will return false if the menu is still closing, but isMenuOpen_ returns false only after\n        // the menu has closed\n        _this.isMenuOpen_ = false;\n        _this.leadingIcon_ = foundationMap.leadingIcon;\n        _this.helperText_ = foundationMap.helperText;\n        _this.menuItemValues_ = _this.adapter_.getMenuItemValues();\n        return _this;\n    }\n    Object.defineProperty(MDCSelectFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                activateBottomLine: function () { return undefined; },\n                deactivateBottomLine: function () { return undefined; },\n                getSelectedMenuItem: function () { return null; },\n                hasLabel: function () { return false; },\n                floatLabel: function () { return undefined; },\n                getLabelWidth: function () { return 0; },\n                hasOutline: function () { return false; },\n                notchOutline: function () { return undefined; },\n                closeOutline: function () { return undefined; },\n                setRippleCenter: function () { return undefined; },\n                notifyChange: function () { return undefined; },\n                setSelectedText: function () { return undefined; },\n                isSelectedTextFocused: function () { return false; },\n                getSelectedTextAttr: function () { return ''; },\n                setSelectedTextAttr: function () { return undefined; },\n                openMenu: function () { return undefined; },\n                closeMenu: function () { return undefined; },\n                getAnchorElement: function () { return null; },\n                setMenuAnchorElement: function () { return undefined; },\n                setMenuAnchorCorner: function () { return undefined; },\n                setMenuWrapFocus: function () { return undefined; },\n                setAttributeAtIndex: function () { return undefined; },\n                removeAttributeAtIndex: function () { return undefined; },\n                focusMenuItemAtIndex: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                getMenuItemValues: function () { return []; },\n                getMenuItemTextAtIndex: function () { return ''; },\n                getMenuItemAttr: function () { return ''; },\n                addClassAtIndex: function () { return undefined; },\n                removeClassAtIndex: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Returns the index of the currently selected menu item, or -1 if none. */\n    MDCSelectFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex_;\n    };\n    MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu) {\n        if (closeMenu === void 0) { closeMenu = false; }\n        if (index >= this.adapter_.getMenuItemCount()) {\n            return;\n        }\n        var previouslySelectedIndex = this.selectedIndex_;\n        this.selectedIndex_ = index;\n        if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n            this.adapter_.setSelectedText('');\n        }\n        else {\n            this.adapter_.setSelectedText(this.adapter_.getMenuItemTextAtIndex(this.selectedIndex_).trim());\n        }\n        if (previouslySelectedIndex !== numbers.UNSET_INDEX) {\n            this.adapter_.removeClassAtIndex(previouslySelectedIndex, cssClasses.SELECTED_ITEM_CLASS);\n            this.adapter_.removeAttributeAtIndex(previouslySelectedIndex, strings.ARIA_SELECTED_ATTR);\n        }\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n            this.adapter_.addClassAtIndex(this.selectedIndex_, cssClasses.SELECTED_ITEM_CLASS);\n            this.adapter_.setAttributeAtIndex(this.selectedIndex_, strings.ARIA_SELECTED_ATTR, 'true');\n        }\n        this.layout();\n        if (closeMenu) {\n            this.adapter_.closeMenu();\n        }\n        this.handleChange();\n    };\n    MDCSelectFoundation.prototype.setValue = function (value) {\n        var index = this.menuItemValues_.indexOf(value);\n        this.setSelectedIndex(index);\n        this.handleChange();\n    };\n    MDCSelectFoundation.prototype.getValue = function () {\n        var listItem = this.adapter_.getSelectedMenuItem();\n        if (listItem) {\n            return this.adapter_.getMenuItemAttr(listItem, strings.VALUE_ATTR) || '';\n        }\n        return '';\n    };\n    MDCSelectFoundation.prototype.getDisabled = function () {\n        return this.disabled_;\n    };\n    MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {\n        this.disabled_ = isDisabled;\n        if (this.disabled_) {\n            this.adapter_.addClass(cssClasses.DISABLED);\n            this.adapter_.closeMenu();\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.DISABLED);\n        }\n        if (this.leadingIcon_) {\n            this.leadingIcon_.setDisabled(this.disabled_);\n        }\n        this.adapter_.setSelectedTextAttr('tabindex', this.disabled_ ? '-1' : '0');\n        this.adapter_.setSelectedTextAttr('aria-disabled', this.disabled_.toString());\n    };\n    /**\n     * @param content Sets the content of the helper text.\n     */\n    MDCSelectFoundation.prototype.setHelperTextContent = function (content) {\n        if (this.helperText_) {\n            this.helperText_.setContent(content);\n        }\n    };\n    MDCSelectFoundation.prototype.layout = function () {\n        if (this.adapter_.hasLabel()) {\n            var openNotch = this.getValue().length > 0;\n            this.notchOutline(openNotch);\n        }\n    };\n    MDCSelectFoundation.prototype.handleMenuOpened = function () {\n        if (this.adapter_.getMenuItemValues().length === 0) {\n            return;\n        }\n        this.adapter_.addClass(cssClasses.ACTIVATED);\n        // Menu should open to the last selected element, should open to first menu item otherwise.\n        var focusItemIndex = this.selectedIndex_ >= 0 ? this.selectedIndex_ : 0;\n        this.adapter_.focusMenuItemAtIndex(focusItemIndex);\n    };\n    MDCSelectFoundation.prototype.handleMenuClosed = function () {\n        this.adapter_.removeClass(cssClasses.ACTIVATED);\n        this.isMenuOpen_ = false;\n        this.adapter_.setSelectedTextAttr('aria-expanded', 'false');\n        // Unfocus the select if menu is closed without a selection\n        if (!this.adapter_.isSelectedTextFocused()) {\n            this.blur_();\n        }\n    };\n    /**\n     * Handles value changes, via change event or programmatic updates.\n     */\n    MDCSelectFoundation.prototype.handleChange = function () {\n        this.updateLabel_();\n        this.adapter_.notifyChange(this.getValue());\n        var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n        if (isRequired) {\n            this.setValid(this.isValid());\n            if (this.helperText_) {\n                this.helperText_.setValidity(this.isValid());\n            }\n        }\n    };\n    MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {\n        this.setSelectedIndex(index, /** closeMenu */ true);\n    };\n    /**\n     * Handles focus events from select element.\n     */\n    MDCSelectFoundation.prototype.handleFocus = function () {\n        this.adapter_.addClass(cssClasses.FOCUSED);\n        if (this.adapter_.hasLabel()) {\n            this.notchOutline(true);\n            this.adapter_.floatLabel(true);\n        }\n        this.adapter_.activateBottomLine();\n        if (this.helperText_) {\n            this.helperText_.showToScreenReader();\n        }\n    };\n    /**\n     * Handles blur events from select element.\n     */\n    MDCSelectFoundation.prototype.handleBlur = function () {\n        if (this.isMenuOpen_) {\n            return;\n        }\n        this.blur_();\n    };\n    MDCSelectFoundation.prototype.handleClick = function (normalizedX) {\n        if (this.isMenuOpen_) {\n            return;\n        }\n        this.adapter_.setRippleCenter(normalizedX);\n        this.adapter_.openMenu();\n        this.isMenuOpen_ = true;\n        this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n    };\n    MDCSelectFoundation.prototype.handleKeydown = function (event) {\n        if (this.isMenuOpen_) {\n            return;\n        }\n        var isEnter = event.key === 'Enter' || event.keyCode === 13;\n        var isSpace = event.key === 'Space' || event.keyCode === 32;\n        var arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n        var arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n        if (this.adapter_.hasClass(cssClasses.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {\n            this.adapter_.openMenu();\n            this.isMenuOpen_ = true;\n            this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n            event.preventDefault();\n        }\n    };\n    /**\n     * Opens/closes the notched outline.\n     */\n    MDCSelectFoundation.prototype.notchOutline = function (openNotch) {\n        if (!this.adapter_.hasOutline()) {\n            return;\n        }\n        var isFocused = this.adapter_.hasClass(cssClasses.FOCUSED);\n        if (openNotch) {\n            var labelScale = numbers.LABEL_SCALE;\n            var labelWidth = this.adapter_.getLabelWidth() * labelScale;\n            this.adapter_.notchOutline(labelWidth);\n        }\n        else if (!isFocused) {\n            this.adapter_.closeOutline();\n        }\n    };\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n        if (this.leadingIcon_) {\n            this.leadingIcon_.setAriaLabel(label);\n        }\n    };\n    /**\n     * Sets the text content of the leading icon.\n     */\n    MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {\n        if (this.leadingIcon_) {\n            this.leadingIcon_.setContent(content);\n        }\n    };\n    MDCSelectFoundation.prototype.setValid = function (isValid) {\n        this.adapter_.setSelectedTextAttr('aria-invalid', (!isValid).toString());\n        if (isValid) {\n            this.adapter_.removeClass(cssClasses.INVALID);\n        }\n        else {\n            this.adapter_.addClass(cssClasses.INVALID);\n        }\n    };\n    MDCSelectFoundation.prototype.isValid = function () {\n        if (this.adapter_.hasClass(cssClasses.REQUIRED) && !this.adapter_.hasClass(cssClasses.DISABLED)) {\n            // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n            // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n            return this.selectedIndex_ !== numbers.UNSET_INDEX &&\n                (this.selectedIndex_ !== 0 || Boolean(this.getValue()));\n        }\n        return true;\n    };\n    MDCSelectFoundation.prototype.setRequired = function (isRequired) {\n        if (isRequired) {\n            this.adapter_.addClass(cssClasses.REQUIRED);\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.REQUIRED);\n        }\n        this.adapter_.setSelectedTextAttr('aria-required', isRequired.toString());\n    };\n    MDCSelectFoundation.prototype.getRequired = function () {\n        return this.adapter_.getSelectedTextAttr('aria-required') === 'true';\n    };\n    MDCSelectFoundation.prototype.init = function () {\n        var anchorEl = this.adapter_.getAnchorElement();\n        if (anchorEl) {\n            this.adapter_.setMenuAnchorElement(anchorEl);\n            this.adapter_.setMenuAnchorCorner(Corner.BOTTOM_START);\n        }\n        this.adapter_.setMenuWrapFocus(false);\n        var value = this.getValue();\n        if (value) {\n            this.setValue(value);\n        }\n        // Initially sync floating label\n        this.updateLabel_();\n    };\n    /**\n     * Notches the outline and floats the label when appropriate.\n     */\n    MDCSelectFoundation.prototype.updateLabel_ = function () {\n        var value = this.getValue();\n        var optionHasValue = value.length > 0;\n        if (this.adapter_.hasLabel()) {\n            this.notchOutline(optionHasValue);\n            if (!this.adapter_.hasClass(cssClasses.FOCUSED)) {\n                this.adapter_.floatLabel(optionHasValue);\n            }\n        }\n    };\n    /**\n     * Unfocuses the select component.\n     */\n    MDCSelectFoundation.prototype.blur_ = function () {\n        this.adapter_.removeClass(cssClasses.FOCUSED);\n        this.updateLabel_();\n        this.adapter_.deactivateBottomLine();\n        var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n        if (isRequired) {\n            this.setValid(this.isValid());\n            if (this.helperText_) {\n                this.helperText_.setValidity(this.isValid());\n            }\n        }\n    };\n    return MDCSelectFoundation;\n}(MDCFoundation));\nexport { MDCSelectFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSelectFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}