{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as CONTROLS from 'three/examples/js/controls/OrbitControls.js';\nimport * as THREE from \"three\";\nimport './App.css'; // Test\n\nclass App extends Component {\n  componentDidMount() {\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    let renderer = new THREE.WebGLRenderer(); // controls\n\n    let controls = new CONTROLS.OrbitControls(camera, renderer.domElement);\n    controls.maxPolarAngle = Math.PI * 0.5;\n    controls.minDistance = 1000;\n    controls.maxDistance = 5000;\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    this.mount.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate); //controls.update();\n\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","ReactDOM","CONTROLS","THREE","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","controls","OrbitControls","domElement","maxPolarAngle","Math","PI","minDistance","maxDistance","setSize","mount","appendChild","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,WAAP,C,CAEA;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,IAAIH,KAAK,CAACI,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIL,KAAK,CAACM,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIV,KAAK,CAACW,aAAV,EAAf,CAHkB,CAIlB;;AAEA,QAAIC,QAAQ,GAAG,IAAIb,QAAQ,CAACc,aAAb,CAA4BR,MAA5B,EAAoCK,QAAQ,CAACI,UAA7C,CAAf;AACAF,IAAAA,QAAQ,CAACG,aAAT,GAAyBC,IAAI,CAACC,EAAL,GAAU,GAAnC;AACAL,IAAAA,QAAQ,CAACM,WAAT,GAAuB,IAAvB;AACAN,IAAAA,QAAQ,CAACO,WAAT,GAAuB,IAAvB;AAEAT,IAAAA,QAAQ,CAACU,OAAT,CAAkBb,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,EAXkB,CAYlB;AACA;;AACA,SAAKY,KAAL,CAAWC,WAAX,CAAwBZ,QAAQ,CAACI,UAAjC;AACA,QAAIS,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIzB,KAAK,CAAC0B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI5B,KAAK,CAAC6B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAtB,IAAAA,KAAK,CAAC2B,GAAN,CAAWF,IAAX;AACAvB,IAAAA,MAAM,CAAC0B,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB,CADwB,CAGxB;;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACA3B,MAAAA,QAAQ,CAAC4B,MAAT,CAAiBnC,KAAjB,EAAwBE,MAAxB;AACD,KAPD;;AAQA4B,IAAAA,OAAO;AACR;;AACDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,GAAG,EAAEC,GAAG,IAAK,KAAKlB,KAAL,GAAakB,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAnCyB;;AAsC5B,eAAetC,GAAf","sourcesContent":["\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as CONTROLS from 'three/examples/js/controls/OrbitControls.js';\nimport * as THREE from \"three\";\nimport './App.css';\n\n// Test\nclass App extends Component {\n  componentDidMount() {\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    let renderer = new THREE.WebGLRenderer();\n    // controls\n\n    let controls = new CONTROLS.OrbitControls( camera, renderer.domElement );\n    controls.maxPolarAngle = Math.PI * 0.5;\n    controls.minDistance = 1000;\n    controls.maxDistance = 5000;\n\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    this.mount.appendChild( renderer.domElement );\n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n\n      //controls.update();\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}