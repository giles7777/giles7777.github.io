{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\ConwayAgent.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport { Agent } from \"./Agent\";\nimport { Button } from \"@rmwc/button\";\nimport { TextField } from \"@rmwc/textfield\";\nimport { Select } from \"@rmwc/select\";\nimport '@material/textfield/dist/mdc.textfield.css';\nimport '@rmwc/select/select.css';\nimport '@material/select/dist/mdc.select.css';\nimport '@material/floating-label/dist/mdc.floating-label.css';\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\nimport '@material/list/dist/mdc.list.css';\nimport '@material/menu/dist/mdc.menu.css';\nimport '@material/menu-surface/dist/mdc.menu-surface.css';\nimport '@material/ripple/dist/mdc.ripple.css';\nconst States = {\n  Idle: \"Idle\",\n  Sensing: \"Sensing\"\n};\nconst Messages = {\n  AreYouAlive: \"AreYouAlive\",\n  ImAlive: \"ImAlive\",\n  Resurrect: \"Resurrect\"\n};\n/*\r\nAgent based on Conway's Game of Life\r\n */\n\nexport class ConwayAgent extends Agent {\n  constructor(context, radio, id, world, size, x, y, z, rotx = 0, roty = 0, rotz = 0, params, alive) {\n    super(context, radio, id, world, size, x, y, z, rotx, roty, rotz);\n    this.debugSim = false;\n    this.debugNetwork = false;\n    this.params = params;\n    this.setAlive(alive);\n    this.state.lastCycle = 0;\n    this.state.state = States.Idle;\n    this.state.batch = 0;\n    this.state.aliveCount = 0;\n  }\n\n  setAlive(alive) {\n    this.state.alive = alive;\n\n    if (alive) {\n      this.material.color.setHex(0x0000FF);\n    } else {\n      this.material.color.setHex(0x222222);\n    }\n  } // Simulation methods\n\n\n  loop() {\n    let time = new Date().getTime();\n\n    if (this.state.state === States.Idle) {\n      if (time < this.state.lastCycle + this.params.cycleTime) return;\n      this.state.state = States.Sensing;\n      this.state.startedSensing = new Date().getTime();\n      this.state.batch = this.state.batch + 1;\n      this.state.aliveCount = 0; // Query our neighbors.\n\n      for (let i = 0; i < this.neighbors.length; i++) {\n        let msg = {\n          command: Messages.AreYouAlive,\n          batch: this.state.batch\n        };\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\n      }\n    } else if (this.state.state === States.Sensing) {\n      if (time > this.state.startedSensing + this.params.cycleTime) {\n        // We've collected as many answers as we are going to get\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\n          this.setAlive(true);\n        } else if (this.state.alive === false) {\n          if (this.state.aliveCount === 3) {\n            this.setAlive(true);\n          } else {\n            if (Math.random() < this.params.spontaneousGeneration) {\n              //console.log(\"Spontanous Generate\");\n              this.setAlive(true);\n\n              if (Math.random() < this.params.resurrectionChance) {\n                //console.log(\"Awake my brothers!\");\n                // Resurrect your neighbors\n                for (let i = 0; i < this.neighbors.length; i++) {\n                  let msg = {\n                    command: Messages.Resurrect\n                  };\n                  this.radio.sendMessage(this.id, this.neighbors[i], msg);\n                }\n              }\n            }\n          }\n        } else {\n          this.setAlive(false);\n        }\n\n        this.state.state = States.Idle;\n        this.state.lastCycle = new Date().getTime();\n        return;\n      }\n    }\n  } // Receive a network message.  Contains from,to,msg properties\n\n\n  receiveMessage(wrapper) {\n    if (this.debugNetwork) {\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\n    }\n\n    let msg = wrapper.msg;\n\n    if (msg.command === Messages.Resurrect) {\n      let r = Math.random(); //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\n\n      if (r < this.params.resurrectionChance) {\n        //console.log(\"Jesus!\");\n        this.setAlive(true);\n      }\n    }\n\n    if (this.state.state !== States.Sensing) {\n      if (this.debugNetwork) {\n        console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\n      } // ignore\n\n\n      return;\n    }\n\n    switch (msg.command) {\n      case Messages.ImAlive:\n        if (msg.batch !== this.state.batch) {\n          // ignore old batch answer\n          return;\n        }\n\n        this.state.aliveCount++;\n        break;\n\n      case Messages.AreYouAlive:\n        if (this.state.alive === true) {\n          this.radio.sendMessage(this.id, wrapper.from, {\n            command: Messages.ImAlive,\n            batch: msg.batch\n          });\n        } // Do not send a message if dead to preserve bandwidth\n\n\n        break;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, \"Game of Like\"));\n  }\n\n}\nexport function ConwayControl(props) {\n  const [startPattern, setStartPattern] = useState(props.startPattern);\n  const [size, setSize] = useState(props.size);\n  const [cycleTime, setCycleTime] = useState(props.cycleTime);\n  const [spontaneousGeneration, setSpontaneousGeneration] = useState(props.spontaneousGeneration);\n  const [resurrectionChance, setResurrectionChance] = useState(props.resurrectionChance);\n\n  const submit = evt => {\n    if (evt) evt.preventDefault();\n    props.paramsChangedAction({\n      startPattern: startPattern,\n      size: size,\n      cycleTime: cycleTime,\n      spontaneousGeneration: spontaneousGeneration,\n      resurrectionChance: resurrectionChance\n    });\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"512px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, \"Game of Life - Agent Control\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    label: \"Start Pattern\",\n    options: [\"Random\", \"Quadpole\"],\n    value: startPattern,\n    onChange: e => setStartPattern(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"80%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Size\",\n    required: true,\n    value: size,\n    onChange: e => setSize(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"80%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"CycleTime\",\n    required: true,\n    value: cycleTime,\n    onChange: e => setCycleTime(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"80%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Spontaneous Generation\",\n    required: true,\n    value: spontaneousGeneration,\n    onChange: e => setSpontaneousGeneration(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      width: \"80%\",\n      height: \"56px\",\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\"\n    },\n    label: \"Resurrection Chance\",\n    required: true,\n    value: resurrectionChance,\n    onChange: e => setResurrectionChance(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Update\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/ConwayAgent.js"],"names":["React","Component","memo","useEffect","useState","Agent","Button","TextField","Select","States","Idle","Sensing","Messages","AreYouAlive","ImAlive","Resurrect","ConwayAgent","constructor","context","radio","id","world","size","x","y","z","rotx","roty","rotz","params","alive","debugSim","debugNetwork","setAlive","state","lastCycle","batch","aliveCount","material","color","setHex","loop","time","Date","getTime","cycleTime","startedSensing","i","neighbors","length","msg","command","sendMessage","Math","random","spontaneousGeneration","resurrectionChance","receiveMessage","wrapper","console","log","JSON","stringify","r","from","render","ConwayControl","props","startPattern","setStartPattern","setSize","setCycleTime","setSpontaneousGeneration","setResurrectionChance","submit","evt","preventDefault","paramsChangedAction","width","e","target","value","height","margin","display","marginTop"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\r\n\r\nimport {Agent} from \"./Agent\";\r\nimport {Button} from \"@rmwc/button\";\r\nimport {TextField} from \"@rmwc/textfield\"\r\nimport {Select} from \"@rmwc/select\"\r\n\r\nimport '@material/textfield/dist/mdc.textfield.css';\r\nimport '@rmwc/select/select.css';\r\nimport '@material/select/dist/mdc.select.css';\r\nimport '@material/floating-label/dist/mdc.floating-label.css';\r\nimport '@material/notched-outline/dist/mdc.notched-outline.css';\r\nimport '@material/line-ripple/dist/mdc.line-ripple.css';\r\nimport '@material/list/dist/mdc.list.css';\r\nimport '@material/menu/dist/mdc.menu.css';\r\nimport '@material/menu-surface/dist/mdc.menu-surface.css';\r\nimport '@material/ripple/dist/mdc.ripple.css';\r\n\r\nconst States = {Idle:\"Idle\",Sensing:\"Sensing\"};\r\nconst Messages = {AreYouAlive:\"AreYouAlive\",ImAlive:\"ImAlive\",Resurrect:\"Resurrect\"};\r\n\r\n\r\n/*\r\nAgent based on Conway's Game of Life\r\n */\r\nexport class ConwayAgent extends Agent {\r\n  debugSim = false;\r\n  debugNetwork = false;\r\n\r\n  constructor(context,radio,id,world,size,x,y,z,rotx=0,roty=0,rotz=0,params,alive) {\r\n    super(context,radio,id,world,size,x,y,z,rotx,roty,rotz);\r\n\r\n    this.params = params;\r\n    this.setAlive(alive);\r\n    this.state.lastCycle = 0;\r\n    this.state.state = States.Idle;\r\n    this.state.batch = 0;\r\n    this.state.aliveCount = 0;\r\n  }\r\n\r\n  setAlive(alive) {\r\n    this.state.alive = alive;\r\n\r\n    if (alive) {\r\n      this.material.color.setHex(0x0000FF);\r\n    } else {\r\n      this.material.color.setHex(0x222222);\r\n    }\r\n  }\r\n\r\n  // Simulation methods\r\n  loop() {\r\n    let time = new Date().getTime();\r\n\r\n    if (this.state.state === States.Idle) {\r\n      if (time < this.state.lastCycle + this.params.cycleTime) return;\r\n\r\n      this.state.state = States.Sensing;\r\n      this.state.startedSensing = new Date().getTime();\r\n      this.state.batch = this.state.batch + 1;\r\n      this.state.aliveCount = 0;\r\n\r\n      // Query our neighbors.\r\n      for(let i=0; i < this.neighbors.length; i++) {\r\n        let msg = {command:Messages.AreYouAlive, batch:this.state.batch};\r\n        this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n      }\r\n    } else if (this.state.state === States.Sensing) {\r\n      if (time > this.state.startedSensing + this.params.cycleTime) {\r\n        // We've collected as many answers as we are going to get\r\n        if (this.state.alive === true && (this.state.aliveCount === 2 || this.state.aliveCount === 3)) {\r\n          this.setAlive(true);\r\n        } else if (this.state.alive === false) {\r\n\r\n          if (this.state.aliveCount === 3) {\r\n            this.setAlive(true);\r\n          } else {\r\n            if (Math.random() < this.params.spontaneousGeneration) {\r\n              //console.log(\"Spontanous Generate\");\r\n              this.setAlive(true);\r\n              if (Math.random() < this.params.resurrectionChance) {\r\n                //console.log(\"Awake my brothers!\");\r\n                // Resurrect your neighbors\r\n                for(let i=0; i < this.neighbors.length; i++) {\r\n                  let msg = {command:Messages.Resurrect};\r\n                  this.radio.sendMessage(this.id, this.neighbors[i], msg);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          this.setAlive(false);\r\n        }\r\n\r\n        this.state.state = States.Idle;\r\n        this.state.lastCycle = new Date().getTime();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Receive a network message.  Contains from,to,msg properties\r\n  receiveMessage(wrapper) {\r\n    if (this.debugNetwork) {\r\n      console.log(\"Agent: \" + this.id + \" recv: \" + JSON.stringify(wrapper));\r\n    }\r\n\r\n    let msg = wrapper.msg;\r\n\r\n    if (msg.command === Messages.Resurrect) {\r\n      let r = Math.random();\r\n      //console.log(\"Got resurrect.  rolled: \" + r + \" vs: \" + this.params.resurrectionChance);\r\n      if (r < this.params.resurrectionChance) {\r\n        //console.log(\"Jesus!\");\r\n        this.setAlive(true);\r\n      }\r\n    }\r\n\r\n    if (this.state.state !== States.Sensing) {\r\n      if (this.debugNetwork) {\r\n        console.log(\"Agent: \" + this.id + \" ignored.  Not Sensing\");\r\n      }\r\n      // ignore\r\n      return;\r\n    }\r\n\r\n    switch(msg.command) {\r\n      case Messages.ImAlive:\r\n        if (msg.batch !== this.state.batch) {\r\n          // ignore old batch answer\r\n          return;\r\n        }\r\n\r\n        this.state.aliveCount++;\r\n        break;\r\n      case Messages.AreYouAlive:\r\n        if (this.state.alive === true) {\r\n          this.radio.sendMessage(this.id, wrapper.from, {command: Messages.ImAlive, batch: msg.batch})\r\n        }\r\n        // Do not send a message if dead to preserve bandwidth\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div><h1>Game of Like</h1></div>\r\n  }\r\n}\r\n\r\nexport function ConwayControl(props) {\r\n  const [startPattern,setStartPattern] = useState(props.startPattern);\r\n  const [size,setSize] = useState(props.size);\r\n  const [cycleTime, setCycleTime] = useState(props.cycleTime);\r\n  const [spontaneousGeneration, setSpontaneousGeneration] = useState(props.spontaneousGeneration);\r\n  const [resurrectionChance,setResurrectionChance] = useState(props.resurrectionChance);\r\n\r\n  const submit = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n\r\n    props.paramsChangedAction({\r\n      startPattern:startPattern,\r\n      size:size,\r\n      cycleTime:cycleTime,\r\n      spontaneousGeneration:spontaneousGeneration,\r\n      resurrectionChance:resurrectionChance\r\n    });\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width:\"512px\"\r\n    }}>\r\n      <h1>Game of Life - Agent Control</h1>\r\n      <form onSubmit={submit}>\r\n        <Select label=\"Start Pattern\" options={[\"Random\",\"Quadpole\"]} value={startPattern} onChange={e => setStartPattern(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"80%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Size\" required value={size} onChange={e => setSize(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"80%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"CycleTime\" required value={cycleTime} onChange={e => setCycleTime(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"80%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Spontaneous Generation\" required value={spontaneousGeneration} onChange={e => setSpontaneousGeneration(e.target.value)} />\r\n        <TextField style={{\r\n          width:\"80%\",\r\n          height:\"56px\",\r\n          margin:\"auto\",\r\n          display:\"block\",\r\n          marginTop:\"24px\",\r\n        }}label=\"Resurrection Chance\" required value={resurrectionChance} onChange={e => setResurrectionChance(e.target.value)} />\r\n        <Button type=\"submit\" label=\"Update\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}