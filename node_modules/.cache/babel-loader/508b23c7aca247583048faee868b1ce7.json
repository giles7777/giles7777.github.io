{"ast":null,"code":"var _jsxFileName = \"C:\\\\cygwin64\\\\home\\\\giles\\\\projs\\\\personal\\\\getalife\\\\prototype\\\\src\\\\App.js\";\nimport React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\";\nimport { ConwayAgent, ConwayControl } from \"./ConwayAgent\";\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\";\nimport CameraControl from \"./CameraControl\";\nconst style = {\n  height: 512,\n  maxWidth: 1024\n};\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\nconst transmissionDelayMax = 0; // ms max\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n    this.debugNetwork = false;\n    this.debugNeighbors = false;\n    this.showNeighborsFor = -1;\n    this.messages = [];\n    this.simPaused = true;\n    this.pauseTime = Number.MAX_SAFE_INTEGER;\n    this.time = 0;\n    this.lastLoopTime = new Date().getTime();\n    this.agentParams = {\n      startPattern: \"test\",\n      size: 6,\n      cycleTime: 200,\n      stateSendTime: 100,\n      spontaneousGeneration: 0.001 * 0,\n      resurrectionChance: 0.5 * 0\n    };\n\n    this.worldSetup = () => {\n      this.world = new World();\n    };\n\n    this.agentSetup = params => {\n      let id = 0;\n      let random = false;\n      let chance = 0.4;\n      let quadpole = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];\n      let blank = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];\n      let corners = [[1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1]];\n      /*\n          let test = [\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,1],\n            [0,0,0,0,0,0,0,0,1,1],\n          ];\n      \n       */\n\n      /*\n          let test = [\n            [0,0,0,0,1,1],\n            [0,0,0,0,0,1],\n            [0,0,0,0,0,0],\n            [0,0,0,0,0,0],\n            [1,0,0,0,0,0],\n            [1,1,0,0,0,0]\n          ];\n      \n       */\n\n      let test = [[1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]];\n      let pattern;\n      let patX;\n      let patY;\n\n      if (params.startPattern === \"random\") {\n        random = true;\n      } else {\n        switch (params.startPattern) {\n          case \"quadpole\":\n            pattern = quadpole;\n            break;\n\n          case \"blank\":\n            pattern = blank;\n            break;\n\n          case \"test\":\n            pattern = test;\n            break;\n\n          case \"corners\":\n            pattern = corners;\n            break;\n        }\n\n        patX = pattern[0].length;\n        patY = pattern.length;\n      }\n\n      let size = params.size;\n      this.agents = [];\n\n      for (let y = 0; y < size; y++) {\n        for (let x = 0; x < size; x++) {\n          let alive = true;\n          let px = x;\n          let py = y;\n\n          if (random) {\n            alive = Math.random() < chance;\n          } else {\n            px = x;\n            py = size - y - 1;\n            alive = pattern[x][y] === 1;\n          }\n\n          const agent = new ConwayAgent(THREE, this, id++, this.world, 0.1, px - size / 2, py - size / 2, 0, Math.PI / 2, 0, 0, params, alive); //console.log(\"agent: \" + (id-1) + \" id: \" + (y * size + x) + \" x: \" + x + \" y: \" + y + \" alive: \" + alive);\n\n          this.agents[y * size + x] = agent;\n        }\n      }\n    };\n\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n      );\n      this.camera.position.z = 10; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n\n      this.controls = new OrbitControls(this.camera, this.el);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      for (let n = 0; n < this.agents.length; n++) {\n        this.scene.add(this.agents[n].getMesh());\n      }\n\n      this.calcAgentNeighbors(8);\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 200, 0);\n      lights[1].position.set(100, 200, 100);\n      lights[2].position.set(-100, -200, -100); //this.scene.add(lights[0]);\n      //this.scene.add(lights[1]);\n      //this.scene.add(lights[2]);\n    };\n\n    this.startAnimationLoop = () => {\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n      let now = new Date().getTime();\n\n      if (!this.simPaused) {\n        // Handle delivery of messages\n        this.time += now - this.lastLoopTime;\n        this.setState({\n          time: this.time\n        });\n        let remove = [];\n\n        for (let i = 0; i < this.messages.length; i++) {\n          if (this.messages[i].time < this.time) {\n            if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n\n            if (typeof this.messages[i].to === 'undefined') {\n              console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]));\n            } else {\n              this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n            }\n\n            remove.push(i);\n          }\n        }\n\n        for (let i = 0; i < remove.length; i++) {\n          this.messages.splice(remove[i] - i, 1);\n        } // Handle clocking of agents\n        // TODO: Likely we should randomally walk for better simulation of real world parallelism\n\n\n        for (let i = 0; i < this.agents.length; i++) {\n          this.agents[i].loop(this.time);\n        }\n\n        if (this.time > this.pauseTime) {\n          console.log(\"Pausing sim\");\n          this.simPaused = true;\n          this.renderer.render(this.scene, this.camera);\n          this.pauseTime = Number.MAX_SAFE_INTEGER;\n          return;\n        }\n      }\n\n      this.lastLoopTime = now;\n      delta += clock.getDelta();\n\n      if (delta < interval) {\n        return;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n      delta = delta % interval;\n    };\n\n    this.handleWindowResize = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height; // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup(this.agentParams);\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    this.setState({\n      time: 0\n    }); // Render once so we see the initial pattern\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  } // Setup the world environment.\n\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for (let agentIdx = 0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({\n            dist: dist,\n            agentIdx: i\n          });\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      });\n      if (this.debugNeighbors) console.log(JSON.stringify(distances)); //console.log(distances);\n\n      let neighbors = [];\n      let len = Math.min(max, distances.length);\n\n      for (let i = 0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n\n    if (this.showNeighborsFor !== -1) {\n      let neighbors = this.agents[this.showNeighborsFor].getNeighbors();\n\n      for (let i = 0; i < neighbors.length; i++) {\n        this.agents[neighbors[i]].setMarked(true);\n      }\n    }\n  }\n\n  sendMessage(from, to, msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({\n      from: from,\n      to: to,\n      msg: msg,\n      time: this.time + Math.random() * transmissionDelayMax\n    });\n  }\n\n  handleSimPause() {\n    this.simPaused = true;\n  }\n\n  handleSimPlay() {\n    this.simPaused = false;\n    this.lastLoopTime = new Date().getTime();\n  } // Play the sim for one cycle time\n\n\n  handleSimStep() {\n    this.simPaused = false;\n    this.lastLoopTime = new Date().getTime();\n    this.pauseTime = this.time + this.agentParams.cycleTime;\n  }\n\n  handleSimReset() {\n    this.simPaused = true;\n    this.time = 0;\n    this.setState({\n      time: this.time\n    });\n    this.lastLoopTime = new Date().getTime();\n    this.messages = [];\n\n    while (this.scene.children.length > 0) {\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup(this.agentParams);\n    this.addCustomSceneObjects();\n  }\n\n  handleCameraReset() {\n    this.controls.reset();\n  }\n\n  handleAgentParamsChanged(params) {\n    console.log(\"Params changed: \" + JSON.stringify(params));\n    this.agentParams = { ...this.agentParams,\n      ...params\n    };\n    this.handleSimReset();\n  }\n\n  markNeighbors(agentIdx) {\n    // clear old\n    for (let i = 0; i < this.agents.length; i++) {\n      this.agents[i].setMarked(false);\n    }\n\n    let neighbors = this.agents[agentIdx].getNeighbors();\n\n    for (let i = 0; i < neighbors.length; i++) {\n      this.agents[neighbors[i]].setMarked(!this.agents[neighbors[i]].getMarked());\n    }\n  }\n\n  showAliveCount(agentIdx) {\n    console.log(\"Agent: \" + agentIdx);\n    const neighbors = this.agents[agentIdx].getNeighbors();\n    let aliveCount = 0;\n\n    for (let i = 0; i < neighbors.length; i++) {\n      console.log(\"neighbor: \" + neighbors[i] + \" alive: \" + this.agents[neighbors[i]].isAlive());\n\n      if (this.agents[neighbors[i]].isAlive()) {\n        aliveCount++;\n      }\n    }\n\n    console.log(\"aliveCount: \" + aliveCount);\n  }\n\n  handleKeyPressed(e) {\n    let row = 9;\n    let size = 10;\n\n    switch (e.key) {\n      case '0':\n        this.markNeighbors(row * size + 0);\n        this.showAliveCount(row * size + 0);\n        break;\n\n      case '1':\n        this.markNeighbors(row * size + 1);\n        this.showAliveCount(row * size + 1);\n        break;\n\n      case '2':\n        this.markNeighbors(row * size + 2);\n        this.showAliveCount(row * size + 2);\n        break;\n\n      case '3':\n        this.markNeighbors(row * size + 3);\n        this.showAliveCount(row * size + 3);\n        break;\n\n      case '4':\n        this.markNeighbors(row * size + 4);\n        this.showAliveCount(row * size + 4);\n        break;\n\n      case '5':\n        this.markNeighbors(row * size + 5);\n        this.showAliveCount(row * size + 5);\n        break;\n\n      case '6':\n        this.markNeighbors(row * size + 6);\n        this.showAliveCount(row * size + 6);\n        break;\n\n      case '7':\n        this.markNeighbors(row * size + 7);\n        this.showAliveCount(row * size + 7);\n        break;\n\n      case '8':\n        this.markNeighbors(row * size + 8);\n        this.showAliveCount(row * size + 8);\n        break;\n\n      case '9':\n        this.markNeighbors(row * size + 9);\n        this.showAliveCount(row * size + 9);\n        break;\n\n      case 's':\n        this.handleSimStep();\n        break;\n\n      case 'c':\n        for (let i = 0; i < this.agents.length; i++) {\n          this.agents[i].setMarked(false);\n        }\n\n        break;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: ref => this.el = ref,\n      onKeyPress: e => this.handleKeyPressed(e),\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SimControl, {\n      time: this.state.time,\n      resetAction: e => this.handleSimReset(),\n      pauseAction: e => this.handleSimPause(),\n      playAction: e => this.handleSimPlay(),\n      stepAction: e => this.handleSimStep(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CameraControl, {\n      resetAction: e => this.handleCameraReset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(ConwayControl, Object.assign({}, this.agentParams, {\n      paramsChangedAction: (param, val) => this.handleAgentParamsChanged(param, val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }\n    }))));\n  }\n\n}\n\nexport default memo(App);","map":{"version":3,"sources":["C:/cygwin64/home/giles/projs/personal/getalife/prototype/src/App.js"],"names":["React","Component","memo","useEffect","useState","THREE","OrbitControls","World","ConwayAgent","ConwayControl","Queue","SimControl","CameraControl","style","height","maxWidth","delta","clock","Clock","interval","transmissionDelayMax","App","state","debugNetwork","debugNeighbors","showNeighborsFor","messages","simPaused","pauseTime","Number","MAX_SAFE_INTEGER","time","lastLoopTime","Date","getTime","agentParams","startPattern","size","cycleTime","stateSendTime","spontaneousGeneration","resurrectionChance","worldSetup","world","agentSetup","params","id","random","chance","quadpole","blank","corners","test","pattern","patX","patY","length","agents","y","x","alive","px","py","Math","agent","PI","sceneSetup","width","el","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","addCustomSceneObjects","n","add","getMesh","calcAgentNeighbors","lights","PointLight","set","startAnimationLoop","requestID","window","requestAnimationFrame","now","setState","remove","i","console","log","JSON","stringify","to","receiveMessage","push","splice","loop","render","getDelta","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","max","agentIdx","distances","pos","getPosition","dist","distanceToSquared","sort","a","b","neighbors","len","min","setNeighbors","getNeighbors","setMarked","sendMessage","from","msg","handleSimPause","handleSimPlay","handleSimStep","handleSimReset","children","handleCameraReset","reset","handleAgentParamsChanged","markNeighbors","getMarked","showAliveCount","aliveCount","isAlive","handleKeyPressed","e","row","key","ref","display","param","val"],"mappings":"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","sourcesContent":["import React, { Component, memo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { World } from \"./World\"\nimport { ConwayAgent,ConwayControl } from \"./ConwayAgent\"\nimport { Queue } from \"./Queue\";\nimport SimControl from \"./SimControl\"\nimport CameraControl from \"./CameraControl\"\n\nconst style = {\n  height: 512,\n  maxWidth: 1024\n};\n\nlet delta = 0;\nlet clock = new THREE.Clock();\nlet interval = 1 / 30;\n\nconst transmissionDelayMax = 0;  // ms max\n\nclass App extends Component {\n  state = {}\n  debugNetwork = false;\n  debugNeighbors = false;\n  showNeighborsFor = -1;\n  messages = [];\n  simPaused = true;\n  pauseTime = Number.MAX_SAFE_INTEGER;\n  time = 0;  // Simulation time\n  lastLoopTime = new Date().getTime();\n\n  agentParams = {startPattern:\"test\", size: 6,\n    cycleTime: 200,\n    stateSendTime: 100,\n    spontaneousGeneration: 0.001*0,\n    resurrectionChance: 0.5*0};\n\n  componentDidMount() {\n    this.worldSetup();\n    this.agentSetup(this.agentParams);\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n\n    this.setState({time:0});\n\n    // Render once so we see the initial pattern\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Setup the world environment.\n  worldSetup = () => {\n    this.world = new World();\n  };\n\n  // Setup the agents\n  agentSetup = (params) => {\n    let id = 0;\n\n    let random = false;\n    let chance = 0.4;\n    let quadpole = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [1,1,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,0,0,0,0,0],\n      [0,1,0,1,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,1,1,1,1,0,0,0,0],\n      [0,0,0,0,0,0,1,0,0,0],\n      [0,0,0,0,0,1,1,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n    ];\n\n    let blank = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n    ];\n\n    let corners = [\n      [1,1,0,0,0,0,0,0,1,1],\n      [1,0,0,0,0,0,0,0,0,1],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,0,0,0,0,1],\n      [1,1,0,0,0,0,0,0,1,1],\n    ];\n/*\n    let test = [\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,1],\n      [0,0,0,0,0,0,0,0,1,1],\n    ];\n\n */\n/*\n    let test = [\n      [0,0,0,0,1,1],\n      [0,0,0,0,0,1],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [1,0,0,0,0,0],\n      [1,1,0,0,0,0]\n    ];\n\n */\n    let test = [\n      [1,1,0,0,0,0],\n      [1,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0]\n    ];\n\n    let pattern;\n    let patX;\n    let patY;\n\n    if (params.startPattern === \"random\") {\n      random = true;\n    } else {\n      switch(params.startPattern) {\n        case \"quadpole\":\n          pattern = quadpole;\n          break;\n        case \"blank\":\n          pattern = blank;\n          break;\n        case \"test\":\n          pattern = test;\n          break;\n        case \"corners\":\n          pattern = corners;\n          break;\n      }\n      patX = pattern[0].length;\n      patY = pattern.length;\n    }\n\n    let size = params.size;\n\n    this.agents = [];\n\n    for(let y=0; y < size; y++) {\n      for(let x=0; x < size; x++) {\n        let alive = true;\n\n        let px = x;\n        let py = y;\n\n        if (random) {\n          alive = Math.random() < chance;\n        } else {\n          px = x;\n          py = size - y - 1;\n\n          alive = pattern[x][y] === 1;\n        }\n\n        const agent = new ConwayAgent(THREE,this,id++,this.world,0.1,px-size/2,py-size/2,0,Math.PI/2,0,0,params,alive);\n        //console.log(\"agent: \" + (id-1) + \" id: \" + (y * size + x) + \" x: \" + x + \" y: \" + y + \" alive: \" + alive);\n        this.agents[y * size + x] = agent;\n      }\n    }\n  };\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000.0 // far plane\n    );\n    this.camera.position.z = 10; // is used here to set some distance from a cube that is located at z = 0\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n  };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n    for(let n=0; n < this.agents.length; n++) {\n      this.scene.add(this.agents[n].getMesh());\n    }\n\n    this.calcAgentNeighbors(8);\n\n    const lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n\n    //this.scene.add(lights[0]);\n    //this.scene.add(lights[1]);\n    //this.scene.add(lights[2]);\n  };\n\n  // Calculate agent neighbors based on distance.\n  calcAgentNeighbors(max) {\n    if (this.debugNeighbors) console.log(\"Calculating neighbors\");\n\n    for(let agentIdx=0; agentIdx < this.agents.length; agentIdx++) {\n      if (this.debugNeighbors) console.log(\"Agent: \" + agentIdx);\n      let distances = [];\n\n      let agent = this.agents[agentIdx];\n      let pos = agent.getPosition();\n\n      for (let i = 0; i < this.agents.length; i++) {\n        if (i !== agentIdx) {\n          let dist = this.agents[i].getPosition().distanceToSquared(pos);\n          distances.push({dist: dist, agentIdx: i});\n        }\n      }\n\n      distances.sort(function (a, b) {\n        return a.dist - b.dist;\n      });\n      if (this.debugNeighbors) console.log(JSON.stringify(distances));\n\n      //console.log(distances);\n      let neighbors = [];\n      let len = Math.min(max,distances.length);\n\n      for(let i=0; i < len; i++) {\n        neighbors[i] = distances[i].agentIdx;\n      }\n\n      if (this.debugNeighbors) console.log(JSON.stringify(neighbors));\n      this.agents[agentIdx].setNeighbors(neighbors);\n    }\n\n    if (this.showNeighborsFor !== -1) {\n      let neighbors = this.agents[this.showNeighborsFor].getNeighbors();\n      for(let i=0; i < neighbors.length; i++) {\n        this.agents[neighbors[i]].setMarked(true);\n      }\n    }\n  }\n\n  startAnimationLoop = () => {\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    let now = new Date().getTime();\n\n    if (!this.simPaused) {\n      // Handle delivery of messages\n      this.time += now - this.lastLoopTime;\n      this.setState({time:this.time});\n\n      let remove = [];\n      for (let i = 0; i < this.messages.length; i++) {\n        if (this.messages[i].time < this.time) {\n          if (this.debugNetwork) console.log(\"Routing message: \" + JSON.stringify(this.messages[i]));\n          if (typeof this.messages[i].to === 'undefined') {\n            console.log(\"Invalid message: \" + JSON.stringify(this.messages[i]))\n          } else {\n            this.agents[this.messages[i].to].receiveMessage(this.messages[i]);\n          }\n          remove.push(i);\n        }\n      }\n\n      for (let i = 0; i < remove.length; i++) {\n        this.messages.splice(remove[i] - i, 1);\n      }\n\n      // Handle clocking of agents\n      // TODO: Likely we should randomally walk for better simulation of real world parallelism\n      for (let i = 0; i < this.agents.length; i++) {\n        this.agents[i].loop(this.time);\n      }\n\n      if (this.time > this.pauseTime) {\n        console.log(\"Pausing sim\");\n        this.simPaused = true;\n        this.renderer.render(this.scene, this.camera);\n        this.pauseTime = Number.MAX_SAFE_INTEGER;\n        return;\n      }\n    }\n\n    this.lastLoopTime = now;\n    delta += clock.getDelta();\n    if (delta < interval) {\n      return;\n    }\n\n    this.renderer.render(this.scene, this.camera);\n    delta = delta % interval;\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  sendMessage(from,to,msg) {\n    if (this.debugNetwork) {\n      console.log(\"Send message. from: \" + from + \" to: \" + to + \" msg: \" + JSON.stringify(msg));\n    }\n\n    if (typeof from === \"undefined\") {\n      throw \"From is required\";\n    }\n    if (typeof to === \"undefined\") {\n      throw \"To is required\";\n    }\n\n    this.messages.push({from:from,to:to,msg:msg,time: this.time + Math.random() * transmissionDelayMax});\n  }\n\n  handleSimPause() {\n    this.simPaused = true;\n  }\n\n  handleSimPlay() {\n    this.simPaused = false;\n    this.lastLoopTime = new Date().getTime();\n  }\n\n  // Play the sim for one cycle time\n  handleSimStep() {\n    this.simPaused = false;\n    this.lastLoopTime = new Date().getTime();\n    this.pauseTime = this.time + this.agentParams.cycleTime;\n  }\n\n  handleSimReset() {\n    this.simPaused = true;\n    this.time = 0;\n    this.setState({time:this.time});\n    this.lastLoopTime = new Date().getTime();\n    this.messages = [];\n\n    while(this.scene.children.length > 0){\n      this.scene.remove(this.scene.children[0]);\n    }\n\n    this.agentSetup(this.agentParams);\n    this.addCustomSceneObjects();\n  }\n\n  handleCameraReset() {\n    this.controls.reset();\n  }\n\n  handleAgentParamsChanged(params) {\n    console.log(\"Params changed: \" + JSON.stringify(params));\n\n    this.agentParams = {...this.agentParams,...params};\n\n    this.handleSimReset();\n  }\n\n  markNeighbors(agentIdx) {\n    // clear old\n    for(let i=0; i < this.agents.length; i++) {\n      this.agents[i].setMarked(false);\n    }\n\n    let neighbors = this.agents[agentIdx].getNeighbors();\n    for(let i=0; i < neighbors.length; i++) {\n      this.agents[neighbors[i]].setMarked(!this.agents[neighbors[i]].getMarked());\n    }\n  }\n\n  showAliveCount(agentIdx) {\n    console.log(\"Agent: \" + agentIdx);\n    const neighbors = this.agents[agentIdx].getNeighbors();\n    let aliveCount = 0;\n    for(let i=0; i < neighbors.length; i++) {\n      console.log(\"neighbor: \" + neighbors[i] + \" alive: \" + this.agents[neighbors[i]].isAlive());\n      if (this.agents[neighbors[i]].isAlive()) {\n        aliveCount++;\n      }\n    }\n    console.log(\"aliveCount: \" + aliveCount);\n\n  }\n\n  handleKeyPressed(e) {\n    let row = 9;\n    let size = 10;\n\n    switch(e.key) {\n      case '0':\n        this.markNeighbors(row * size + 0);\n        this.showAliveCount(row * size + 0);\n        break;\n      case '1':\n        this.markNeighbors(row * size + 1);\n        this.showAliveCount(row * size + 1);\n        break;\n      case '2':\n        this.markNeighbors(row * size + 2);\n        this.showAliveCount(row * size + 2);\n        break;\n      case '3':\n        this.markNeighbors(row * size + 3);\n        this.showAliveCount(row * size + 3);\n        break;\n      case '4':\n        this.markNeighbors(row * size + 4);\n        this.showAliveCount(row * size + 4);\n        break;\n      case '5':\n        this.markNeighbors(row * size + 5);\n        this.showAliveCount(row * size + 5);\n        break;\n      case '6':\n        this.markNeighbors(row * size + 6);\n        this.showAliveCount(row * size + 6);\n        break;\n      case '7':\n        this.markNeighbors(row * size + 7);\n        this.showAliveCount(row * size + 7);\n        break;\n      case '8':\n        this.markNeighbors(row * size + 8);\n        this.showAliveCount(row * size + 8);\n        break;\n      case '9':\n        this.markNeighbors(row * size + 9);\n        this.showAliveCount(row * size + 9);\n        break;\n      case 's':\n        this.handleSimStep();\n        break;\n      case 'c':\n        for(let i=0; i < this.agents.length; i++) {\n          this.agents[i].setMarked(false);\n        }\n        break;\n    }\n  }\n\n  render() {\n    return <div>\n      <div style={style} ref={ref => (this.el = ref)} onKeyPress = {e => this.handleKeyPressed(e) } autoFocus />\n      <div style={{\n        display:\"flex\"\n      }} >\n        <div>\n        <SimControl time = {this.state.time} resetAction={e => this.handleSimReset()} pauseAction={e => this.handleSimPause() } playAction={e => this.handleSimPlay() } stepAction={e => this.handleSimStep() }/>\n        <CameraControl resetAction={e => this.handleCameraReset()} />\n        </div>\n        <ConwayControl {...this.agentParams} paramsChangedAction = {(param,val) => this.handleAgentParamsChanged(param,val) } />\n      </div>\n    </div>\n  }\n}\n\nexport default memo(App);\n"]},"metadata":{},"sourceType":"module"}